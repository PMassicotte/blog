{
  "hash": "9e43caf78f955935ee99316414c5bd49",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Reading multiples CSV files using readr'\nauthor: 'Philippe Massicotte'\ndate: '2022-02-15'\ncategories: [R, Data manipulation]\nimage: 'img/preview.png'\n---\n\n\n\n\n\n\nIf you are beginning in R, chances are that you have used `read.csv()` to import CSV files into R. While this function works perfectly fine, it can only read one file at a time. Hence, new R programmers often read multiple files successively and combine the data afterward.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read all the data files\ndf1 <- read.csv(\"file1.csv\")\ndf2 <- read.csv(\"file2.csv\")\ndf3 <- read.csv(\"file3.csv\")\ndf4 <- read.csv(\"file4.csv\")\ndf5 <- read.csv(\"file5.csv\")\n\n# Combine all the data frame together\nbig_df <- rbind(df1, df2, df3, df4, df5)\n```\n:::\n\n\nWhereas this can work fine if you have only a few files, this can become tedious when the number of files to read increases. A better approach would be to use a list of files and read them at once. For quite a while, I have been using a combination of `map_df()` from the [purrr package](https://purrr.tidyverse.org/reference/map.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of file names\nfiles <- c(\"file1.csv\", \"file2.csv\", \"file3.csv\", \"file4.csv\", \"file5.csv\")\n\n# Read and combine all data files into a single data frame\nbig_df <- map_df(files, read_csv)\n```\n:::\n\n\nIn the release of [readr 2.0.0](https://www.tidyverse.org/blog/2021/07/readr-2-0-0/), the `read_csv()` function can directly take a list of files as input, eliminating the need to use the `mad_df()` function. Hence, we can now read multiples files as follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read and combine all data files into a single data frame without using the\n# map_df function\nbig_df <- read_csv(files)\n```\n:::\n\n\nIn this short blog post, I wanted to benchmark the speed difference between `map_df(files, read_csv)` and `read_csv(files)`. To do it so let's first [generate some data files](https://www.tidyverse.org/blog/2021/07/readr-2-0-0/).\n\n![](img/preview.png)\n\nPhoto by <a href=\"https://unsplash.com/@marcsm?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Marc Sendra Martorell</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n\npurrr::iwalk(\n  split(flights, flights$carrier),\n  ~ {\n    .x$carrier[[1]]\n    data.table::fwrite(.x, glue::glue(\"/tmp/flights_{.y}.csv\"))\n  }\n)\n\nfiles <- fs::dir_ls(path = \"/tmp\", glob = \"*flights*csv\")\nfiles\n#> /tmp/flights_9E.csv /tmp/flights_AA.csv /tmp/flights_AS.csv /tmp/flights_B6.csv \n#> /tmp/flights_DL.csv /tmp/flights_EV.csv /tmp/flights_F9.csv /tmp/flights_FL.csv \n#> /tmp/flights_HA.csv /tmp/flights_MQ.csv /tmp/flights_OO.csv /tmp/flights_UA.csv \n#> /tmp/flights_US.csv /tmp/flights_VX.csv /tmp/flights_WN.csv /tmp/flights_YV.csv\n```\n:::\n\n\nWe can look at what the data look like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(files[[1]])\n#> # A tibble: 18,460 × 19\n#>     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>    <dbl> <dbl> <dbl>    <dbl>          <dbl>     <dbl>    <dbl>          <dbl>\n#>  1  2013     1     1      810            810         0     1048           1037\n#>  2  2013     1     1     1451           1500        -9     1634           1636\n#>  3  2013     1     1     1452           1455        -3     1637           1639\n#>  4  2013     1     1     1454           1500        -6     1635           1636\n#>  5  2013     1     1     1507           1515        -8     1651           1656\n#>  6  2013     1     1     1530           1530         0     1650           1655\n#>  7  2013     1     1     1546           1540         6     1753           1748\n#>  8  2013     1     1     1550           1550         0     1844           1831\n#>  9  2013     1     1     1552           1600        -8     1749           1757\n#> 10  2013     1     1     1554           1600        -6     1701           1734\n#> # ℹ 18,450 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <dbl>, flight <dbl>,\n#> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#> #   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n\n\nNow that data files have been successfully created, we can compare the two reading options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- microbenchmark::microbenchmark(\n  map_df_read_csv = map_df(files, read_csv, col_types = cols(carrier = col_character())),\n  read_csv = read_csv(files, col_types = cols(carrier = col_character())),\n  times = 100\n)\n\nres\n#> Unit: milliseconds\n#>             expr      min       lq     mean   median       uq      max neval\n#>  map_df_read_csv 622.2706 691.0963 724.5537 747.4462 757.6883 799.8428   100\n#>         read_csv 177.7021 183.8535 192.6876 187.7292 193.5388 311.9672   100\n\nautoplot(res)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png)\n:::\n:::\n\n\nUsing `read_csv()` directly seems to be much (\\~two times) faster than the `map_df(files, read_csv)` combination.\n\n<details>\n\n<summary>Session info</summary>\n\n\n::: {.cell}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.4.0 (2024-04-24)\n#>  os       Linux Mint 21.3\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Montreal\n#>  date     2024-05-02\n#>  pandoc   2.9.2.1 @ /usr/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  ! package        * version date (UTC) lib source\n#>  P bit              4.0.5   2022-11-15 [?] RSPM\n#>  P bit64            4.0.5   2020-08-30 [?] RSPM\n#>  P cachem           1.0.8   2023-05-01 [?] RSPM\n#>  P cli              3.6.2   2023-12-11 [?] RSPM\n#>  P codetools        0.2-19  2023-02-01 [?] CRAN (R 4.2.2)\n#>  P colorspace       2.1-0   2023-01-23 [?] RSPM\n#>  P crayon           1.5.2   2022-09-29 [?] RSPM\n#>  P data.table       1.15.4  2024-03-30 [?] RSPM\n#>  P devtools         2.4.5   2022-10-11 [?] RSPM (R 4.4.0)\n#>  P digest           0.6.35  2024-03-11 [?] RSPM\n#>  P dplyr          * 1.1.4   2023-11-17 [?] RSPM\n#>  P ellipsis         0.3.2   2021-04-29 [?] RSPM\n#>  P evaluate         0.23    2023-11-01 [?] RSPM\n#>  P extrafont        0.19    2023-01-18 [?] RSPM\n#>  P extrafontdb      1.0     2012-06-11 [?] RSPM\n#>  P fansi            1.0.6   2023-12-08 [?] RSPM\n#>  P farver           2.1.1   2022-07-06 [?] RSPM\n#>  P fastmap          1.1.1   2023-02-24 [?] RSPM\n#>  P forcats        * 1.0.0   2023-01-29 [?] RSPM\n#>  P fs               1.6.4   2024-04-25 [?] CRAN (R 4.4.0)\n#>  P generics         0.1.3   2022-07-05 [?] RSPM\n#>  P ggplot2        * 3.5.1   2024-04-23 [?] RSPM\n#>  P ggpmthemes     * 0.0.2   2024-04-25 [?] Github (pmassicotte/ggpmthemes@993d61e)\n#>  P glue             1.7.0   2024-01-09 [?] RSPM\n#>  P gtable           0.3.5   2024-04-22 [?] RSPM\n#>  P hms              1.1.3   2023-03-21 [?] RSPM\n#>  P htmltools        0.5.8.1 2024-04-04 [?] RSPM\n#>  P htmlwidgets      1.6.4   2023-12-06 [?] RSPM\n#>  P httpuv           1.6.15  2024-03-26 [?] RSPM\n#>  P jsonlite         1.8.8   2023-12-04 [?] RSPM\n#>  P knitr            1.46    2024-04-06 [?] RSPM\n#>  P later            1.3.2   2023-12-06 [?] RSPM\n#>  P lifecycle        1.0.4   2023-11-07 [?] RSPM\n#>  P lubridate      * 1.9.3   2023-09-27 [?] RSPM\n#>  P magrittr         2.0.3   2022-03-30 [?] RSPM\n#>  P memoise          2.0.1   2021-11-26 [?] RSPM\n#>  P microbenchmark   1.4.10  2023-04-28 [?] RSPM\n#>  P mime             0.12    2021-09-28 [?] RSPM\n#>  P miniUI           0.1.1.1 2018-05-18 [?] RSPM (R 4.4.0)\n#>  P munsell          0.5.1   2024-04-01 [?] RSPM\n#>  R nvimcom        * 0.9.41  <NA>       [?] <NA>\n#>  P nycflights13   * 1.0.2   2021-04-12 [?] RSPM\n#>  P pillar           1.9.0   2023-03-22 [?] RSPM\n#>  P pkgbuild         1.4.4   2024-03-17 [?] RSPM (R 4.4.0)\n#>  P pkgconfig        2.0.3   2019-09-22 [?] RSPM\n#>  P pkgload          1.3.4   2024-01-16 [?] RSPM (R 4.4.0)\n#>  P processx         3.8.4   2024-03-16 [?] RSPM\n#>  P profvis          0.3.8   2023-05-02 [?] RSPM (R 4.4.0)\n#>  P promises         1.3.0   2024-04-05 [?] RSPM\n#>  P ps               1.7.6   2024-01-18 [?] RSPM\n#>  P purrr          * 1.0.2   2023-08-10 [?] RSPM\n#>  P quarto         * 1.4     2024-03-06 [?] RSPM\n#>  P R.cache          0.16.0  2022-07-21 [?] RSPM\n#>  P R.methodsS3      1.8.2   2022-06-13 [?] RSPM\n#>  P R.oo             1.26.0  2024-01-24 [?] RSPM\n#>  P R.utils          2.12.3  2023-11-18 [?] RSPM\n#>  P R6               2.5.1   2021-08-19 [?] RSPM\n#>  P Rcpp             1.0.12  2024-01-09 [?] RSPM\n#>  P readr          * 2.1.5   2024-01-10 [?] RSPM\n#>  P remotes          2.5.0   2024-03-17 [?] RSPM (R 4.4.0)\n#>  P renv             1.0.7   2024-04-11 [?] RSPM (R 4.4.0)\n#>  P rlang            1.1.3   2024-01-10 [?] RSPM\n#>  P rmarkdown        2.26    2024-03-05 [?] RSPM\n#>  P rstudioapi       0.16.0  2024-03-24 [?] RSPM\n#>  P Rttf2pt1         1.3.12  2023-01-22 [?] RSPM\n#>  P scales           1.3.0   2023-11-28 [?] RSPM\n#>  P sessioninfo      1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n#>  P shiny            1.8.1.1 2024-04-02 [?] RSPM (R 4.4.0)\n#>  P stringi          1.8.3   2023-12-11 [?] RSPM\n#>  P stringr        * 1.5.1   2023-11-14 [?] RSPM\n#>  P styler         * 1.10.3  2024-04-07 [?] RSPM\n#>  P tibble         * 3.2.1   2023-03-20 [?] RSPM\n#>  P tidyr          * 1.3.1   2024-01-24 [?] RSPM\n#>  P tidyselect       1.2.1   2024-03-11 [?] RSPM\n#>  P tidyverse      * 2.0.0   2023-02-22 [?] RSPM\n#>  P timechange       0.3.0   2024-01-18 [?] RSPM\n#>  P tzdb             0.4.0   2023-05-12 [?] RSPM\n#>  P urlchecker       1.0.1   2021-11-30 [?] RSPM (R 4.4.0)\n#>  P usethis          2.2.3   2024-02-19 [?] RSPM (R 4.4.0)\n#>  P utf8             1.2.4   2023-10-22 [?] RSPM\n#>  P vctrs            0.6.5   2023-12-01 [?] RSPM\n#>  P vroom            1.6.5   2023-12-05 [?] RSPM\n#>  P withr            3.0.0   2024-01-16 [?] RSPM\n#>  P xfun             0.43    2024-03-25 [?] RSPM\n#>  P xtable           1.8-4   2019-04-21 [?] RSPM (R 4.4.0)\n#>  P yaml             2.3.8   2023-12-11 [?] RSPM\n#> \n#>  [1] /tmp/RtmplSkXJG/renv-use-libpath-8b85372cc5e7d\n#>  [2] /home/filoche/.cache/R/renv/sandbox/linux-linuxmint-jammy/R-4.4/x86_64-pc-linux-gnu/9a444a72\n#> \n#>  P ── Loaded and on-disk path mismatch.\n#>  R ── Package was removed from disk.\n#> \n#> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n:::\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}