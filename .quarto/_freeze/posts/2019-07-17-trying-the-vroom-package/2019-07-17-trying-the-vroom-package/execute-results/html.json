{
  "hash": "74c3bab14f8a2eb098de00b8225105ce",
  "result": {
    "markdown": "---\ntitle: \"Trying the new R vroom Package\"\nauthor: \"Philippe Massicotte\"\ndate: \"2019-07-17\"\ncategories: [R, packages]\n---\n\n\n\n\nMany R packages can be used to read plain rectangular data files. Among them, `readr` and `data.table` are quite popular options. Recently, the [vroom](https://github.com/r-lib/vroom) package have been published on CRAN by [Jim Hester](https://twitter.com/jimhester_?lang=en). While I do not know much about the technology behind the scene, Jim says:\n\n> But that’s impossible! How can it be so fast?\n>\n> vroom doesn’t stop to actually read all of your data, it simply indexes where each record is located so it can be read later. The vectors returned use the Altrep framework to lazily load the data on-demand when it is accessed, so you only pay for what you use. This lazy access is done automatically, so no changes to your R data-manipulation code are needed.\n\nBecause I often have to read large data files, I decided to try this new promising package.\n\n\n::: {.cell hash='2019-07-17-trying-the-vroom-package_cache/html/unnamed-chunk-1_7b02ceab83048d7be1b3f1ead0a183c9'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(vroom)\nlibrary(data.table)\nlibrary(ggpmthemes)\n\ntheme_set(theme_poppins(base_size = 14))\n```\n:::\n\n\nIn the next sections, I will compare several methods to read a plain CSV file. The file I will be using contains bike commute data from [capital bike share](https://www.capitalbikeshare.com/system-data). The file contains roughly 170 000 observations and 9 variables.\n\n\n::: {.cell hash='2019-07-17-trying-the-vroom-package_cache/html/unnamed-chunk-2_9ba237d31ab47f77cb4c0c3ae3ac66a1'}\n\n```{.r .cell-code}\nfile <- curl::curl_download(\"https://s3.amazonaws.com/capitalbikeshare-data/201801-capitalbikeshare-tripdata.zip\", destfile = tempfile(fileext = \".zip\"))\nfile <- unzip(file, exdir = tempdir())\nread_csv(file)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 168590 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Start station, End station, Bike number, Member type\ndbl  (3): Duration, Start station number, End station number\ndttm (2): Start date, End date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168,590 × 9\n   Duration `Start date`        `End date`          Start stat…¹ Start…² End s…³\n      <dbl> <dttm>              <dttm>                     <dbl> <chr>     <dbl>\n 1      552 2018-01-01 00:05:06 2018-01-01 00:14:18        31104 Adams …   31400\n 2     1282 2018-01-01 00:14:30 2018-01-01 00:35:53        31321 15th S…   31321\n 3     1265 2018-01-01 00:14:53 2018-01-01 00:35:58        31321 15th S…   31321\n 4      578 2018-01-01 00:15:31 2018-01-01 00:25:09        31406 14th &…   31103\n 5      372 2018-01-01 00:18:02 2018-01-01 00:24:15        31618 4th & …   31619\n 6      369 2018-01-01 00:18:07 2018-01-01 00:24:17        31618 4th & …   31619\n 7      486 2018-01-01 00:19:07 2018-01-01 00:27:14        31042 Market…   31098\n 8     1615 2018-01-01 00:21:55 2018-01-01 00:48:50        31042 Market…   31045\n 9     1598 2018-01-01 00:22:02 2018-01-01 00:48:41        31042 Market…   31045\n10      483 2018-01-01 00:22:10 2018-01-01 00:30:14        31115 Columb…   31509\n# … with 168,580 more rows, 3 more variables: `End station` <chr>,\n#   `Bike number` <chr>, `Member type` <chr>, and abbreviated variable names\n#   ¹​`Start station number`, ²​`Start station`, ³​`End station number`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nBecause the `vroom()` function can use a vector of files, I will duplicate `file` 10 times.\n\n\n::: {.cell hash='2019-07-17-trying-the-vroom-package_cache/html/unnamed-chunk-3_fccc7c4dc0ae0578f6ac8cc4dd35fd6e'}\n\n```{.r .cell-code}\nfiles <- rep(file, 10)\nfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [2] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [3] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [4] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [5] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [6] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [7] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [8] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n [9] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n[10] \"/tmp/RtmpXD8TIh/201801_capitalbikeshare_tripdata.csv\"\n```\n:::\n:::\n\n\nI can now simply use this character vector with `vroom()`. Note that I can also use the `.name_repair` argument to clean column names.\n\n\n::: {.cell hash='2019-07-17-trying-the-vroom-package_cache/html/unnamed-chunk-4_3d150acfbfa1ca9696aba90a304d2a7a'}\n\n```{.r .cell-code}\ndf <- vroom(files, .name_repair = ~janitor::make_clean_names(.))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1685900 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): start_station, end_station, bike_number, member_type\ndbl  (3): duration, start_station_number, end_station_number\ndttm (2): start_date, end_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,685,900 × 9\n   duration start_date          end_date            start_stat…¹ start…² end_s…³\n      <dbl> <dttm>              <dttm>                     <dbl> <chr>     <dbl>\n 1      552 2018-01-01 00:05:06 2018-01-01 00:14:18        31104 Adams …   31400\n 2     1282 2018-01-01 00:14:30 2018-01-01 00:35:53        31321 15th S…   31321\n 3     1265 2018-01-01 00:14:53 2018-01-01 00:35:58        31321 15th S…   31321\n 4      578 2018-01-01 00:15:31 2018-01-01 00:25:09        31406 14th &…   31103\n 5      372 2018-01-01 00:18:02 2018-01-01 00:24:15        31618 4th & …   31619\n 6      369 2018-01-01 00:18:07 2018-01-01 00:24:17        31618 4th & …   31619\n 7      486 2018-01-01 00:19:07 2018-01-01 00:27:14        31042 Market…   31098\n 8     1615 2018-01-01 00:21:55 2018-01-01 00:48:50        31042 Market…   31045\n 9     1598 2018-01-01 00:22:02 2018-01-01 00:48:41        31042 Market…   31045\n10      483 2018-01-01 00:22:10 2018-01-01 00:30:14        31115 Columb…   31509\n# … with 1,685,890 more rows, 3 more variables: end_station <chr>,\n#   bike_number <chr>, member_type <chr>, and abbreviated variable names\n#   ¹​start_station_number, ²​start_station, ³​end_station_number\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\n## Benchmark\n\nOne advantage of `vroom` is its speed. In what follows, I will compare different methods to read the `files` vector that contains 10 files. I will also use the `furrr` package to use map in parallel.\n\n\n::: {.cell hash='2019-07-17-trying-the-vroom-package_cache/html/benchmark1_2fc6598abd1adb77e98888c2cc6e1a7b'}\n\n```{.r .cell-code}\nlibrary(furrr)\n\n# How many cores to use\nplan(multiprocess(workers = availableCores() - 1))\n\nres <- microbenchmark::microbenchmark(\n  vroom(files),\n  map_df(files, read_csv),\n  map_df(files, fread),\n  future_map_dfr(files, vroom),\n  future_map_dfr(files, read_csv),\n  future_map_dfr(files, fread), \n  times = 10\n)\n\nautoplot(res)\n```\n\n::: {.cell-output-display}\n![](2019-07-17-trying-the-vroom-package_files/figure-html/benchmark1-1.svg){width=672}\n:::\n:::\n\n\nAs we can see, the `vroom` package is the winner. It is even considerably faster than the versions using map in parallel, which surprises me! Please leave a message below if you have an explanation.\n\n## Using Altrep\n\nAnother feature of the `vroom()` function is that we can decide which column types are using Altrep. Setting `altrep_opts = TRUE` will enable Altrep for all column types. As seen below, this increases further the speed of the `vroom()` function.\n\n\n::: {.cell hash='2019-07-17-trying-the-vroom-package_cache/html/benchmark2_45cbb441d168d0479c4f783e1647e09a'}\n\n```{.r .cell-code}\nres <- microbenchmark::microbenchmark(\n  vroom(files),\n  vroom(files, altrep_opts = TRUE),\n  times = 10\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `altrep_opts` argument of `vroom()` is deprecated as of vroom 1.1.0.\nPlease use the `altrep` argument instead.\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n```\n:::\n\n```{.r .cell-code}\nautoplot(res)\n```\n\n::: {.cell-output-display}\n![](2019-07-17-trying-the-vroom-package_files/figure-html/benchmark2-1.svg){width=672}\n:::\n:::\n\n\nBased on these results, I think that `vroom` will become part of my daily workflow from now on.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}