{"title":"Removing borders around ggplot2 graphs","markdown":{"yaml":{"title":"Removing borders around ggplot2 graphs","author":"Philippe Massicotte","date":"2019-12-20","categories":["R","ggplot2"],"image":"img/preview.png"},"headingText":"The problem with choosing the right aspect ratio","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nlibrary(tidyverse)\nlibrary(ggpmthemes)\nlibrary(sf)\n\ntheme_set(theme_exo())\n```\n\nRecently I was participating in the *30DayMapChallenge* where people were invited to make a map based on a different daily theme for one whole month.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Announcing <a href=\"https://twitter.com/hashtag/30DayMapChallenge?src=hash&amp;ref_src=twsrc%5Etfw\">#30DayMapChallenge</a> in November 2019! Create a map each day of the month with the following themes üåçüåéüåè<br><br>No restriction on tools. All maps should be created by you. Doing less than 30 maps is fine. <a href=\"https://twitter.com/hashtag/gischat?src=hash&amp;ref_src=twsrc%5Etfw\">#gischat</a> <a href=\"https://twitter.com/hashtag/geography?src=hash&amp;ref_src=twsrc%5Etfw\">#geography</a> <a href=\"https://twitter.com/hashtag/cartography?src=hash&amp;ref_src=twsrc%5Etfw\">#cartography</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> <a href=\"https://t.co/6Go4VFWcJB\">pic.twitter.com/6Go4VFWcJB</a></p>&mdash; Topi Tjukanov (@tjukanov) <a href=\"https://twitter.com/tjukanov/status/1187713840550744066?ref_src=twsrc%5Etfw\">October 25, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\nWhen making a geographical map, or any other visualization where I wanted to use a *forced* coordinate system), choosing the right aspect ratio to save my graphics has always been challenging. Lately, when participating in the map challenge, [C√©dric Scherer](https://cedricscherer.netlify.com/) made me realize that I was really struggling with white borders around my plots when it came the time to export them. **He was right!** :smile:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">One question though: always wondering about your white space, do you not care and avoid to play around with the aspect ratio or is it on purpose?</p>&mdash; C√©dric Scherer (@CedScherer) <a href=\"https://twitter.com/CedScherer/status/1204062911016112128?ref_src=twsrc%5Etfw\">December 9, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\nLet's make a simple map of the USA to illustrate the problem. In a markdown document, the generated graph looks good (i.e. no extra border) because `knitr` is taking care of this for me (more on that later).\n\n```{r map_ggplot2, echo = TRUE}\n# Load the US shapefile\nstates <- st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE))\n\np <- states %>%\n  ggplot() +\n  geom_sf(size = 0.25) + #<<\n  coord_sf(crs = 2163) +\n  theme(\n    panel.border = element_blank(),\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    axis.ticks = element_blank(),\n    plot.background = element_rect(fill = \"#3c3c3c\"),\n    panel.background = element_rect(fill = \"#3c3c3c\")\n  )\n\np\n```\n\nWhen it comes time to save my plots, I usually use the PDF format file unless they contain too much point. In that case, I will use the PNG format. When saving a graph in a file, however, it is difficult to find the right aspect ratio when using coordinate system that forces a specified ratio between the physical representation of data units on the axes (ex.: `coord_fixed()`, `geom_sf()` or `coord_equal()`). To visualize the problem, I will save the previous plot using two different aspect ratios and then import them in my document to show you the difficulty of finding the right aspect ratio.\n\n### Aspect ratio of 7/4\n\nChoosing an aspect ratio of 7/4 creates white borders on the sides of the plot.\n\n```{r map_ggplot2_with_border_7_4, eval=TRUE}\nfile <- \"img/fig_border_7_4.png\"\n\nggsave(\n  file,\n  plot = p,\n  type = \"cairo\",\n  device = \"png\",\n  dpi = 600,\n  width = 7,\n  height = 4\n)\n```\n\n<img src=\"img/fig_border_7_4.png\" style=\"border:2px solid red;\" width=\"800\"/>\n\n### Aspect ratio of 6/7\n\nChoosing an aspect ratio of 6/7 creates white borders at the bottom and the top of the plot.\n\n```{r map_ggplot2_with_border_6_7, eval=TRUE}\nfile <- \"img/fig_border_6_7.png\"\n\nggsave(\n  file,\n  plot = p,\n  type = \"cairo\",\n  device = \"png\",\n  dpi = 600,\n  width = 6,\n  height = 7\n)\n```\n\n<img src=\"img/fig_border_6_7.png\" style=\"border:2px solid red;\" width=\"800\"/>\n\nAs it can be seen in the two figures above, there are two large white borders located either on the sides or above/below of the graph. It is because I have used `geom_sf()` which set automatically the aspect ratio of the plot to respect the chosen geographical coordinate system. Of course, I could play around with trials and errors to find the *best* **width** and **hight** to use to save my plot.\n\nBut wait! **There is a much better way to do it!** :smirk: Actually, I found out there was a hidden gem in `knitr` that allows cropping (using either *pdfcrop* or *convert* functions) to remove borders around an image. In fact, this is the function that is used to automatically remove borders around images when knitting an R Markdown document in R (see the initial plot of this post without borders). The function `knitr::plot_crop(x)` (where *x* is the filename of the plot to be cropped) will trim any existing images on your hard drive.\n\nFirst, let's create our plot in PDF format and use `knitr::plot_crop()` to remove the borders.\n\n```{r crop_pdf, echo = TRUE}\npdf_file <- \"img/fig_border.pdf\"\n\nggsave(\n  pdf_file,\n  device = cairo_pdf,\n  width = 5.51,\n  height = 4.68\n)\n\nknitr::plot_crop(pdf_file)\n\n```\n\nAt this point, the borders have been removed from the original PDF. But what if you want to export this PDF into a bitmap image? This can be achieved using a combination of `pdftools::pdf_render_page()` and `png::writePNG()`. `pdftools::pdf_render_page()` will take the filename of a PDF file and render into a raw bitmap array whereas `png::writePNG()` will actually save the bitmap into a file.\n\n```{r, echo = TRUE}\npng_file <- \"img/fig_border_cropped.png\"\n\nbitmap <- pdftools::pdf_render_page(pdf_file, dpi = 600)\npng::writePNG(bitmap, png_file)\n```\n\n<img src=\"img/fig_border_cropped.png\" style=\"border:2px solid red;\" width=\"800\"/>\n\nBang! No more borders around our plot üëç\n\n<details>\n\n<summary>Session info</summary>\n\n```{r sessioninfo, echo = FALSE}\n## Reproducibility info\noptions(width = 120)\ndevtools::session_info()\n```\n\n</details>\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nlibrary(tidyverse)\nlibrary(ggpmthemes)\nlibrary(sf)\n\ntheme_set(theme_exo())\n```\n\nRecently I was participating in the *30DayMapChallenge* where people were invited to make a map based on a different daily theme for one whole month.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Announcing <a href=\"https://twitter.com/hashtag/30DayMapChallenge?src=hash&amp;ref_src=twsrc%5Etfw\">#30DayMapChallenge</a> in November 2019! Create a map each day of the month with the following themes üåçüåéüåè<br><br>No restriction on tools. All maps should be created by you. Doing less than 30 maps is fine. <a href=\"https://twitter.com/hashtag/gischat?src=hash&amp;ref_src=twsrc%5Etfw\">#gischat</a> <a href=\"https://twitter.com/hashtag/geography?src=hash&amp;ref_src=twsrc%5Etfw\">#geography</a> <a href=\"https://twitter.com/hashtag/cartography?src=hash&amp;ref_src=twsrc%5Etfw\">#cartography</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> <a href=\"https://t.co/6Go4VFWcJB\">pic.twitter.com/6Go4VFWcJB</a></p>&mdash; Topi Tjukanov (@tjukanov) <a href=\"https://twitter.com/tjukanov/status/1187713840550744066?ref_src=twsrc%5Etfw\">October 25, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\nWhen making a geographical map, or any other visualization where I wanted to use a *forced* coordinate system), choosing the right aspect ratio to save my graphics has always been challenging. Lately, when participating in the map challenge, [C√©dric Scherer](https://cedricscherer.netlify.com/) made me realize that I was really struggling with white borders around my plots when it came the time to export them. **He was right!** :smile:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">One question though: always wondering about your white space, do you not care and avoid to play around with the aspect ratio or is it on purpose?</p>&mdash; C√©dric Scherer (@CedScherer) <a href=\"https://twitter.com/CedScherer/status/1204062911016112128?ref_src=twsrc%5Etfw\">December 9, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n## The problem with choosing the right aspect ratio\n\nLet's make a simple map of the USA to illustrate the problem. In a markdown document, the generated graph looks good (i.e. no extra border) because `knitr` is taking care of this for me (more on that later).\n\n```{r map_ggplot2, echo = TRUE}\n# Load the US shapefile\nstates <- st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE))\n\np <- states %>%\n  ggplot() +\n  geom_sf(size = 0.25) + #<<\n  coord_sf(crs = 2163) +\n  theme(\n    panel.border = element_blank(),\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    axis.ticks = element_blank(),\n    plot.background = element_rect(fill = \"#3c3c3c\"),\n    panel.background = element_rect(fill = \"#3c3c3c\")\n  )\n\np\n```\n\nWhen it comes time to save my plots, I usually use the PDF format file unless they contain too much point. In that case, I will use the PNG format. When saving a graph in a file, however, it is difficult to find the right aspect ratio when using coordinate system that forces a specified ratio between the physical representation of data units on the axes (ex.: `coord_fixed()`, `geom_sf()` or `coord_equal()`). To visualize the problem, I will save the previous plot using two different aspect ratios and then import them in my document to show you the difficulty of finding the right aspect ratio.\n\n### Aspect ratio of 7/4\n\nChoosing an aspect ratio of 7/4 creates white borders on the sides of the plot.\n\n```{r map_ggplot2_with_border_7_4, eval=TRUE}\nfile <- \"img/fig_border_7_4.png\"\n\nggsave(\n  file,\n  plot = p,\n  type = \"cairo\",\n  device = \"png\",\n  dpi = 600,\n  width = 7,\n  height = 4\n)\n```\n\n<img src=\"img/fig_border_7_4.png\" style=\"border:2px solid red;\" width=\"800\"/>\n\n### Aspect ratio of 6/7\n\nChoosing an aspect ratio of 6/7 creates white borders at the bottom and the top of the plot.\n\n```{r map_ggplot2_with_border_6_7, eval=TRUE}\nfile <- \"img/fig_border_6_7.png\"\n\nggsave(\n  file,\n  plot = p,\n  type = \"cairo\",\n  device = \"png\",\n  dpi = 600,\n  width = 6,\n  height = 7\n)\n```\n\n<img src=\"img/fig_border_6_7.png\" style=\"border:2px solid red;\" width=\"800\"/>\n\nAs it can be seen in the two figures above, there are two large white borders located either on the sides or above/below of the graph. It is because I have used `geom_sf()` which set automatically the aspect ratio of the plot to respect the chosen geographical coordinate system. Of course, I could play around with trials and errors to find the *best* **width** and **hight** to use to save my plot.\n\nBut wait! **There is a much better way to do it!** :smirk: Actually, I found out there was a hidden gem in `knitr` that allows cropping (using either *pdfcrop* or *convert* functions) to remove borders around an image. In fact, this is the function that is used to automatically remove borders around images when knitting an R Markdown document in R (see the initial plot of this post without borders). The function `knitr::plot_crop(x)` (where *x* is the filename of the plot to be cropped) will trim any existing images on your hard drive.\n\nFirst, let's create our plot in PDF format and use `knitr::plot_crop()` to remove the borders.\n\n```{r crop_pdf, echo = TRUE}\npdf_file <- \"img/fig_border.pdf\"\n\nggsave(\n  pdf_file,\n  device = cairo_pdf,\n  width = 5.51,\n  height = 4.68\n)\n\nknitr::plot_crop(pdf_file)\n\n```\n\nAt this point, the borders have been removed from the original PDF. But what if you want to export this PDF into a bitmap image? This can be achieved using a combination of `pdftools::pdf_render_page()` and `png::writePNG()`. `pdftools::pdf_render_page()` will take the filename of a PDF file and render into a raw bitmap array whereas `png::writePNG()` will actually save the bitmap into a file.\n\n```{r, echo = TRUE}\npng_file <- \"img/fig_border_cropped.png\"\n\nbitmap <- pdftools::pdf_render_page(pdf_file, dpi = 600)\npng::writePNG(bitmap, png_file)\n```\n\n<img src=\"img/fig_border_cropped.png\" style=\"border:2px solid red;\" width=\"800\"/>\n\nBang! No more borders around our plot üëç\n\n<details>\n\n<summary>Session info</summary>\n\n```{r sessioninfo, echo = FALSE}\n## Reproducibility info\noptions(width = 120)\ndevtools::session_info()\n```\n\n</details>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"png","fig-dpi":600,"fig-asp":0.618,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["include-code-files"],"toc":true,"css":["../../styles.css"],"highlight-style":"arrow","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","knitr":{"opts_chunk":{"collapse":true,"comment":"#>"}},"comments":{"utterances":{"repo":"pmassicotte/PMassicotte.github.io"}},"theme":{"light":"flatly","dark":"darkly"},"mainfont":"Montserrat","title-block-banner":true,"title":"Removing borders around ggplot2 graphs","author":"Philippe Massicotte","date":"2019-12-20","categories":["R","ggplot2"],"image":"img/preview.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}