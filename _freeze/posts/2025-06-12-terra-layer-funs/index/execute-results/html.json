{
  "hash": "553a497c1fb26288c0042c39f7574461",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using app(), lapp(), and tapp() with SpatRaster in R\"\nauthor: \"Philippe Massicotte\"\ndate: \"2025-06-12\"\ncategories: [R, terra, gis]\neditor_options:\n  chunk_output_type: console\ncitation: true\n---\n\n\n\n\n\n\n\nIn this short post, I will show how to use the `app()`, `lapp()`, and `tapp()` functions from the `terra` package to apply functions to `SpatRaster` objects. These functions are useful for performing operations on raster data, such as calculating means or applying custom functions across layers.\n\n![Aerial view of layered rock formations showing natural geological strata, representing the concept of working with raster layers in spatial data analysis. Photo by [Eberhard Gross‑Gasteiger](https://www.pexels.com/@eberhardgross/) on Pexels.](https://images.pexels.com/photos/443446/pexels-photo-443446.jpeg){.preview-image}\n\n## Creating a `SpatRaster`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\n\n# Create a SpatRaster with 3 layers, 2x2 pixels\nr <- rast(nrows = 2L, ncols = 2L, nlyrs = 3L)\n\n# Fill with numbers 1 to 12\nvalues(r) <- 1L:12L\n\n# Assign names to the layers\nnames(r) <- c(\"lyr1\", \"lyr2\", \"lyr3\")\n\nr\n#> class       : SpatRaster \n#> size        : 2, 2, 3  (nrow, ncol, nlyr)\n#> resolution  : 180, 90  (x, y)\n#> extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\n#> coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84) \n#> source(s)   : memory\n#> names       : lyr1, lyr2, lyr3 \n#> min values  :    1,    5,    9 \n#> max values  :    4,    8,   12\n\nr[]\n#>      lyr1 lyr2 lyr3\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(r, main = names(r), col = terrain.colors(12L))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-spatraster-1.png)\n:::\n:::\n\n\n\n## Applying functions to `SpatRaster` layers\n\nUse `app()` to apply a function across all layers of a `SpatRaster` object. This function operates on each pixel across all layers, allowing you to compute statistics or perform operations on the raster data.\n\n### Using `app()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply mean across layers for each pixel\napp(r, mean)[]\n#>      mean\n#> [1,]    5\n#> [2,]    6\n#> [3,]    7\n#> [4,]    8\n```\n:::\n\n\n\n### Using `lapp()`\n\nUse `lapp()` to apply a custom function that takes multiple layers as input. This is useful for more complex calculations that involve multiple layers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply custom function across layers\nlapp(r, function(a, b, c) a + 2L * b + c)[]\n#>      lyr1\n#> [1,]   20\n#> [2,]   24\n#> [3,]   28\n#> [4,]   32\n```\n:::\n\n\n\n### Using `tapp()`\n\nUse `tapp()` to apply a function over groups of layers, which is useful for temporal data or when you want to summarize layers by groups.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group layers and apply mean (layers 1 and 2 are grouped, layer 3 separate)\ntapp(r, mean, index = c(1L, 1L, 2L))[]\n#>      X1 X2\n#> [1,]  3  9\n#> [2,]  4 10\n#> [3,]  5 11\n#> [4,]  6 12\n```\n:::\n\n\n\n### Using `global()`\n\nUse the `global()` function to computes a summary statistic for each layer across all pixels. This is useful for obtaining overall statistics like `mean`, `sum`, or standard deviation for each layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate global mean for each layer\nglobal(r, mean)\n#>      mean\n#> lyr1  2.5\n#> lyr2  6.5\n#> lyr3 10.5\n```\n:::\n\n\n\n## Functions comparison\n\n::: {.column-page}\n\n| Function&nbsp;&nbsp;&nbsp; | Operates Over       | Purpose                                      | Output Type              | Example Usage                          | When to Use                                                        |\n| :------------------------- | ------------------- | -------------------------------------------- | ------------------------ | -------------------------------------- | ------------------------------------------------------------------ |\n| `app()`                    | Layers (per pixel)  | Apply a function across layers at each pixel | `SpatRaster` (1+ layers) | `app(r, mean)`<br>`app(r, sum)`        | Simple summaries across layers (`mean`, `sum`, `min`, etc.)        |\n| `lapp()`                   | Layers (vectorized) | Pixel-wise operations with vectorized inputs | `SpatRaster`             | `lapp(r, function(a,b,c) a + 2*b - c)` | Custom functions, better performance, multi-input, per-layer logic |\n| `tapp()`                   | Time groups         | Aggregate over temporal/index groups         | `SpatRaster`             | `tapp(r, mean, index = c(1,1,2))`      | Temporal summaries like monthly or yearly mean, grouped ops        |\n| `global()`                 | Cells (per layer)   | Summary over all pixels in each layer        | `data.frame`             | `global(r, mean)`                      | Whole-layer stats like `mean`, `min`, `sum`, `sd`, etc.            |\n\n:::\n\n<details>\n<summary>Session info</summary>\n\n\n\n::: {.cell}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.5.0 (2025-04-11)\n#>  os       Linux Mint 22\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Montreal\n#>  date     2025-06-12\n#>  pandoc   3.1.3 @ /usr/bin/ (via rmarkdown)\n#>  quarto   1.6.39 @ /usr/local/bin/quarto\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  ! package     * version date (UTC) lib source\n#>  P cachem        1.1.0   2024-05-16 [?] RSPM (R 4.5.0)\n#>  P cli           3.6.5   2025-04-23 [?] CRAN (R 4.5.0)\n#>  P codetools     0.2-20  2024-03-31 [?] CRAN (R 4.4.0)\n#>  P devtools      2.4.5   2022-10-11 [?] RSPM (R 4.5.0)\n#>  P digest        0.6.37  2024-08-19 [?] RSPM (R 4.5.0)\n#>  P ellipsis      0.3.2   2021-04-29 [?] RSPM (R 4.5.0)\n#>  P evaluate      1.0.3   2025-01-10 [?] RSPM\n#>  P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.5.0)\n#>  P fs            1.6.6   2025-04-12 [?] RSPM\n#>  P glue          1.8.0   2024-09-30 [?] RSPM (R 4.5.0)\n#>  P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.5.0)\n#>  P htmlwidgets   1.6.4   2023-12-06 [?] RSPM\n#>  P httpuv        1.6.16  2025-04-16 [?] RSPM\n#>  P jsonlite      2.0.0   2025-03-27 [?] RSPM (R 4.5.0)\n#>  P knitr         1.50    2025-03-16 [?] RSPM\n#>  P later         1.4.2   2025-04-08 [?] RSPM\n#>  P lifecycle     1.0.4   2023-11-07 [?] RSPM (R 4.5.0)\n#>  P magrittr      2.0.3   2022-03-30 [?] RSPM (R 4.5.0)\n#>  P memoise       2.0.1   2021-11-26 [?] RSPM (R 4.5.0)\n#>  P mime          0.13    2025-03-17 [?] RSPM\n#>  P miniUI        0.1.2   2025-04-17 [?] RSPM (R 4.5.0)\n#>  P pkgbuild      1.4.8   2025-05-26 [?] RSPM (R 4.5.0)\n#>  P pkgload       1.4.0   2024-06-28 [?] RSPM\n#>  P profvis       0.4.0   2024-09-20 [?] RSPM (R 4.5.0)\n#>  P promises      1.3.3   2025-05-29 [?] RSPM (R 4.5.0)\n#>  P purrr         1.0.4   2025-02-05 [?] RSPM\n#>  P R6            2.6.1   2025-02-15 [?] RSPM (R 4.5.0)\n#>  P Rcpp          1.0.14  2025-01-12 [?] CRAN (R 4.5.0)\n#>  P remotes       2.5.0   2024-03-17 [?] RSPM\n#>  P renv          1.1.4   2025-03-20 [?] RSPM\n#>  P rlang         1.1.6   2025-04-11 [?] RSPM\n#>  P rmarkdown     2.29    2024-11-04 [?] RSPM\n#>  P sessioninfo   1.2.3   2025-02-05 [?] RSPM (R 4.5.0)\n#>  P shiny         1.10.0  2024-12-14 [?] RSPM (R 4.5.0)\n#>  P terra       * 1.8-54  2025-06-01 [?] RSPM\n#>  P urlchecker    1.0.1   2021-11-30 [?] RSPM (R 4.5.0)\n#>  P usethis       3.1.0   2024-11-26 [?] RSPM (R 4.5.0)\n#>  P vctrs         0.6.5   2023-12-01 [?] RSPM (R 4.5.0)\n#>  P xfun          0.52    2025-04-02 [?] RSPM\n#>  P xtable        1.8-4   2019-04-21 [?] RSPM (R 4.5.0)\n#>  P yaml          2.3.10  2024-07-26 [?] RSPM\n#> \n#>  [1] /tmp/RtmpqlsFA7/renv-use-libpath-25da88295fcb83\n#>  [2] /tmp/RtmpqlsFA7/renv-sandbox\n#> \n#>  * ── Packages attached to the search path.\n#>  P ── Loaded and on-disk path mismatch.\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n:::\n\n\n\n</details>\n\n<details>\n<summary>renv.lock file</summary>\n\n```{.json include=\"renv.lock\"}\n\n```\n\n</details>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}