{
  "hash": "ab88de4e2def32376e404c70450b88a9",
  "result": {
    "markdown": "---\ntitle: \"Reading multiples CSV files using readr\"\nauthor: \"Philippe Massicotte\"\ndate: \"2022-02-15\"\ncategories: [R, data manipulation]\nimage: \"images/img_marc_sendra_speed.jpg\"\n---\n\n\n\n\nIf you are beginning in R, chances are that you have used `read.csv()` to import CSV files into R. While this function works perfectly fine, it can only read one file at a time. Hence, new R programmers often read multiple files successively and combine the data afterward. \n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-1_1a2104a9eb4b96475162bbc1e9c05ffb'}\n\n```{.r .cell-code}\n\n# Read all the data files\ndf1 <- read.csv(\"file1.csv\")\ndf2 <- read.csv(\"file2.csv\")\ndf3 <- read.csv(\"file3.csv\")\ndf4 <- read.csv(\"file4.csv\")\ndf5 <- read.csv(\"file5.csv\")\n\n# Combine all the data frame together\nbig_df <- rbind(df1, df2, df3, df4, df5)\n```\n:::\n\n\nWhereas this can work fine if you have only a few files, this can become tedious when the number of files to read increases. A better approach would be to use a list of files and read them at once. For quite a while, I have been using a combination of `map_df()` from the [purrr package](https://purrr.tidyverse.org/reference/map.html).\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-2_ba1910c154c6e7a9cf0dd1c8e52d2fb7'}\n\n```{.r .cell-code}\n# Create a vector of file names\nfiles <- c(\"file1.csv\", \"file2.csv\", \"file3.csv\", \"file4.csv\", \"file5.csv\")\n\n# Read and combine all data files into a single data frame\nbig_df <- map_df(files, read_csv)\n```\n:::\n\n\nIn the release of [readr 2.0.0](https://www.tidyverse.org/blog/2021/07/readr-2-0-0/), the `read_csv()` function can directly take a list of files as input, eliminating the need to use the `mad_df()` function. Hence, we can now read multiples files as follow:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-3_9da16dee42fa58d4ec837f768106acf8'}\n\n```{.r .cell-code}\n# Read and combine all data files into a single data frame without using the\n# map_df function\nbig_df <- read_csv(files)\n```\n:::\n\n\n[![Lights in the night](images/img_marc_sendra_speed.jpg)](https://unsplash.com/photos/-Vqn2WrfxTQ)\n\nIn this short blog post, I wanted to benchmark the speed difference between `map_df(files, read_csv)` and `read_csv(files)`. To do it so let's first [generate some data files](https://www.tidyverse.org/blog/2021/07/readr-2-0-0/).\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-4_8614c5f7b6e6aa613a8d9243c1ae04e1'}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n\npurrr::iwalk(\n  split(flights, flights$carrier),\n  ~ {\n    .x$carrier[[1]]\n    data.table::fwrite(.x, glue::glue(\"/tmp/flights_{.y}.csv\"))\n  }\n)\n\nfiles <- fs::dir_ls(path = \"/tmp\", glob = \"*flights*csv\")\nfiles\n#> /tmp/flights_9E.csv /tmp/flights_AA.csv /tmp/flights_AS.csv /tmp/flights_B6.csv \n#> /tmp/flights_DL.csv /tmp/flights_EV.csv /tmp/flights_F9.csv /tmp/flights_FL.csv \n#> /tmp/flights_HA.csv /tmp/flights_MQ.csv /tmp/flights_OO.csv /tmp/flights_UA.csv \n#> /tmp/flights_US.csv /tmp/flights_VX.csv /tmp/flights_WN.csv /tmp/flights_YV.csv\n```\n:::\n\n\nWe can look at what the data look like.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-5_9f9389f98464080ec85c1809a243bae0'}\n\n```{.r .cell-code}\nread_csv(files[[1]])\n#> # A tibble: 18,460 × 19\n#>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n#>    <dbl> <dbl> <dbl>    <dbl>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n#>  1  2013     1     1      810        810       0    1048    1037      11       9\n#>  2  2013     1     1     1451       1500      -9    1634    1636      -2       9\n#>  3  2013     1     1     1452       1455      -3    1637    1639      -2       9\n#>  4  2013     1     1     1454       1500      -6    1635    1636      -1       9\n#>  5  2013     1     1     1507       1515      -8    1651    1656      -5       9\n#>  6  2013     1     1     1530       1530       0    1650    1655      -5       9\n#>  7  2013     1     1     1546       1540       6    1753    1748       5       9\n#>  8  2013     1     1     1550       1550       0    1844    1831      13       9\n#>  9  2013     1     1     1552       1600      -8    1749    1757      -8       9\n#> 10  2013     1     1     1554       1600      -6    1701    1734     -33       9\n#> # … with 18,450 more rows, 9 more variables: flight <dbl>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#> #   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n#> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n\nNow that data files have been successfully created, we can compare the two reading options.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_5a65da08467a665b532ef218db3ffbaa'}\n\n```{.r .cell-code}\nres <- microbenchmark::microbenchmark(\n  map_df_read_csv = map_df(files, read_csv, col_types = cols(carrier = col_character())),\n  read_csv = read_csv(files, col_types = cols(carrier = col_character())),\n  times = 100\n)\n\nres\n#> Unit: milliseconds\n#>             expr      min       lq     mean   median       uq      max neval\n#>  map_df_read_csv 413.3536 441.4230 480.7377 497.3756 502.5032 521.7361   100\n#>         read_csv 148.1041 153.3014 163.3054 156.3136 161.2407 251.3683   100\n\nautoplot(res)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nUsing `read_csv()` directly seems to be much (~two times) faster than the `map_df(files, read_csv)` combination. \n\n<details>\n  \n<summary>Session info</summary>\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/sessioninfo_507929d96331e7e94eeb3bad9a7b84e2'}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.1 (2022-06-23)\n#>  os       Ubuntu 22.04 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Toronto\n#>  date     2022-07-30\n#>  pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  package        * version date (UTC) lib source\n#>  assertthat       0.2.1   2019-03-21 [1] RSPM (R 4.2.0)\n#>  backports        1.4.1   2021-12-13 [1] RSPM (R 4.2.0)\n#>  bit              4.0.4   2020-08-04 [1] RSPM (R 4.2.0)\n#>  bit64            4.0.5   2020-08-30 [1] RSPM (R 4.2.0)\n#>  broom            1.0.0   2022-07-01 [1] RSPM (R 4.2.0)\n#>  cachem           1.0.6   2021-08-19 [1] RSPM (R 4.2.0)\n#>  callr            3.7.1   2022-07-13 [1] RSPM (R 4.2.0)\n#>  cellranger       1.1.0   2016-07-27 [1] RSPM (R 4.2.0)\n#>  cli              3.3.0   2022-04-25 [1] RSPM (R 4.2.0)\n#>  codetools        0.2-18  2020-11-04 [2] CRAN (R 4.2.1)\n#>  colorspace       2.0-3   2022-02-21 [1] RSPM (R 4.2.0)\n#>  crayon           1.5.1   2022-03-26 [1] RSPM (R 4.2.0)\n#>  data.table       1.14.2  2021-09-27 [1] RSPM (R 4.2.0)\n#>  DBI              1.1.3   2022-06-18 [1] RSPM (R 4.2.0)\n#>  dbplyr           2.2.1   2022-06-27 [1] RSPM (R 4.2.0)\n#>  devtools         2.4.4   2022-07-20 [1] RSPM (R 4.2.0)\n#>  digest           0.6.29  2021-12-01 [1] RSPM (R 4.2.0)\n#>  dplyr          * 1.0.9   2022-04-28 [1] RSPM (R 4.2.0)\n#>  ellipsis         0.3.2   2021-04-29 [1] RSPM (R 4.2.0)\n#>  evaluate         0.15    2022-02-18 [1] RSPM (R 4.2.0)\n#>  extrafont        0.18    2022-04-12 [1] RSPM (R 4.2.0)\n#>  extrafontdb      1.0     2012-06-11 [1] RSPM (R 4.2.0)\n#>  fansi            1.0.3   2022-03-24 [1] RSPM (R 4.2.0)\n#>  farver           2.1.1   2022-07-06 [1] RSPM (R 4.2.0)\n#>  fastmap          1.1.0   2021-01-25 [1] RSPM (R 4.2.0)\n#>  forcats        * 0.5.1   2021-01-27 [1] RSPM (R 4.2.0)\n#>  fs               1.5.2   2021-12-08 [1] RSPM (R 4.2.0)\n#>  gargle           1.2.0   2021-07-02 [1] RSPM (R 4.2.0)\n#>  generics         0.1.3   2022-07-05 [1] RSPM (R 4.2.0)\n#>  ggplot2        * 3.3.6   2022-05-03 [1] RSPM (R 4.2.0)\n#>  ggpmthemes     * 0.0.2   2022-07-29 [1] Github (pmassicotte/ggpmthemes@993d61e)\n#>  glue             1.6.2   2022-02-24 [1] RSPM (R 4.2.0)\n#>  googledrive      2.0.0   2021-07-08 [1] RSPM (R 4.2.0)\n#>  googlesheets4    1.0.0   2021-07-21 [1] RSPM (R 4.2.0)\n#>  gtable           0.3.0   2019-03-25 [1] RSPM (R 4.2.0)\n#>  haven            2.5.0   2022-04-15 [1] RSPM (R 4.2.0)\n#>  hms              1.1.1   2021-09-26 [1] RSPM (R 4.2.0)\n#>  htmltools        0.5.3   2022-07-18 [1] RSPM (R 4.2.0)\n#>  htmlwidgets      1.5.4   2021-09-08 [1] RSPM (R 4.2.0)\n#>  httpuv           1.6.5   2022-01-05 [1] RSPM (R 4.2.0)\n#>  httr             1.4.3   2022-05-04 [1] RSPM (R 4.2.0)\n#>  jsonlite         1.8.0   2022-02-22 [1] RSPM (R 4.2.0)\n#>  knitr            1.39    2022-04-26 [1] RSPM (R 4.2.0)\n#>  later            1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#>  lifecycle        1.0.1   2021-09-24 [1] RSPM (R 4.2.0)\n#>  lubridate        1.8.0   2021-10-07 [1] RSPM (R 4.2.0)\n#>  magrittr         2.0.3   2022-03-30 [1] RSPM (R 4.2.0)\n#>  memoise          2.0.1   2021-11-26 [1] RSPM (R 4.2.0)\n#>  microbenchmark   1.4.9   2021-11-09 [1] CRAN (R 4.2.1)\n#>  mime             0.12    2021-09-28 [1] RSPM (R 4.2.0)\n#>  miniUI           0.1.1.1 2018-05-18 [1] RSPM (R 4.2.0)\n#>  modelr           0.1.8   2020-05-19 [1] RSPM (R 4.2.0)\n#>  munsell          0.5.0   2018-06-12 [1] RSPM (R 4.2.0)\n#>  nycflights13   * 1.0.2   2021-04-12 [1] CRAN (R 4.2.1)\n#>  pillar           1.8.0   2022-07-18 [1] RSPM (R 4.2.0)\n#>  pkgbuild         1.3.1   2021-12-20 [1] RSPM (R 4.2.0)\n#>  pkgconfig        2.0.3   2019-09-22 [1] RSPM (R 4.2.0)\n#>  pkgload          1.3.0   2022-06-27 [1] RSPM (R 4.2.0)\n#>  prettyunits      1.1.1   2020-01-24 [1] RSPM (R 4.2.0)\n#>  processx         3.7.0   2022-07-07 [1] RSPM (R 4.2.0)\n#>  profvis          0.3.7   2020-11-02 [1] RSPM (R 4.2.0)\n#>  promises         1.2.0.1 2021-02-11 [1] RSPM (R 4.2.0)\n#>  ps               1.7.1   2022-06-18 [1] RSPM (R 4.2.0)\n#>  purrr          * 0.3.4   2020-04-17 [1] RSPM (R 4.2.0)\n#>  R6               2.5.1   2021-08-19 [1] RSPM (R 4.2.0)\n#>  Rcpp             1.0.9   2022-07-08 [1] RSPM (R 4.2.0)\n#>  readr          * 2.1.2   2022-01-30 [1] RSPM (R 4.2.0)\n#>  readxl           1.4.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  remotes          2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#>  reprex           2.0.1   2021-08-05 [1] RSPM (R 4.2.0)\n#>  rlang            1.0.4   2022-07-12 [1] RSPM (R 4.2.0)\n#>  rmarkdown        2.14    2022-04-25 [1] RSPM (R 4.2.0)\n#>  rspm             0.1.0.3 2022-07-27 [1] Github (Enchufa2/rspm@ba091ae)\n#>  rstudioapi       0.13    2020-11-12 [1] RSPM (R 4.2.0)\n#>  Rttf2pt1         1.3.10  2022-02-07 [1] RSPM (R 4.2.0)\n#>  rvest            1.0.2   2021-10-16 [1] RSPM (R 4.2.0)\n#>  scales           1.2.0   2022-04-13 [1] RSPM (R 4.2.0)\n#>  sessioninfo      1.2.2   2021-12-06 [1] RSPM (R 4.2.0)\n#>  shiny            1.7.2   2022-07-19 [1] RSPM (R 4.2.0)\n#>  stringi          1.7.8   2022-07-11 [1] RSPM (R 4.2.0)\n#>  stringr        * 1.4.0   2019-02-10 [1] RSPM (R 4.2.0)\n#>  tibble         * 3.1.8   2022-07-22 [1] RSPM (R 4.2.0)\n#>  tidyr          * 1.2.0   2022-02-01 [1] RSPM (R 4.2.0)\n#>  tidyselect       1.1.2   2022-02-21 [1] RSPM (R 4.2.0)\n#>  tidyverse      * 1.3.2   2022-07-18 [1] RSPM (R 4.2.0)\n#>  tzdb             0.3.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  urlchecker       1.0.1   2021-11-30 [1] RSPM (R 4.2.0)\n#>  usethis          2.1.6   2022-05-25 [1] CRAN (R 4.2.1)\n#>  utf8             1.2.2   2021-07-24 [1] RSPM (R 4.2.0)\n#>  vctrs            0.4.1   2022-04-13 [1] RSPM (R 4.2.0)\n#>  vroom            1.5.7   2021-11-30 [1] RSPM (R 4.2.0)\n#>  withr            2.5.0   2022-03-03 [1] RSPM (R 4.2.0)\n#>  xfun             0.31    2022-05-10 [1] RSPM (R 4.2.0)\n#>  xml2             1.3.3   2021-11-30 [1] RSPM (R 4.2.0)\n#>  xtable           1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#>  yaml             2.3.5   2022-02-21 [1] RSPM (R 4.2.0)\n#> \n#>  [1] /home/filoche/R/x86_64-pc-linux-gnu-library/4.2\n#>  [2] /opt/R/4.2.1/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n:::\n\n\n</details>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}