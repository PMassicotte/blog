---
title: "Arrow partitioning and fast querying"
author: "Philippe Massicotte"
date: "2022-10-11"
categories: [R, Arrow]
# The preview file needs to be named preview.png
# mogrify -format png preview.jpg
# https://quarto.org/docs/websites/website-tools.html#preview-images
image: "img/preview.png" 
editor_options: 
  chunk_output_type: console
draft: true
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(arrow)

library(showtext)
font_add_google("Exo")

theme_set(theme_minimal(base_family = "Exo"))
```

## Downloading data

```{r}
#| label: data-download
# https://s3.amazonaws.com/tripdata/index.html

tmpfile <- tempfile(fileext = ".zip")
url <- "https://s3.amazonaws.com/tripdata/201307-201402-citibike-tripdata.zip"

download.file(url, tmpfile)
files <- unzip(tmpfile, list = TRUE)

ds <- open_dataset(unzip(tmpfile, files$Name, exdir = tempdir()), format = "csv")

ds
nrow(ds)
```

![Photo by <a href="https://unsplash.com/@possessedphotography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Possessed Photography</a> on <a href="https://unsplash.com/s/photos/arrow?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>](img/preview.png){fig-alt="A bunch of arrows on a wall" fig-align="center"}

    ## Data processing

Let's now calculate the age of each user based on the current date and their birth year.

```{r}
#| label: calculate-use-age
ds <- ds |>
  select(
    birth_year = `birth year`,
    tripduration
  ) |>
  filter(str_detect(birth_year, "\\d{4}")) |>
  mutate(birth_year = as.integer(birth_year)) |> 
  mutate(user_age = lubridate::year(Sys.Date()) - birth_year) |>
  na.omit(birth_year)

ds |>
  head() |>
  collect()

# Number of observations
nrow(ds)
```


Overview of the data.

```{r}
ds |>
  head() |>
  collect()
```

Export

```{r}
low_partition <- "~/Desktop/low_partition" 
high_partition <- "~/Desktop/high_partition" 

write_dataset(ds, low_partition, existing_data_behavior = "overwrite")

write_dataset(ds, high_partition, existing_data_behavior = "overwrite", partitioning = "birth_year", )
```

Size of the folder

```{r}
fs::dir_info(low_partition)$size
sum(fs::dir_info(high_partition, recurse = TRUE)$size)
```

## Benchmarks

```{r}
#| eval: true
f <- function(path) {
  open_dataset(path) |>
    group_by(user_age) |>
    summarise(mean_duration = mean(tripduration, na.rm = TRUE), n = n()) |>
    collect()
}

res <- microbenchmark::microbenchmark(
  low_partition = f(low_partition),
  high_partition = f(high_partition),
  times = 10
)

res
```

```{r}
f(low_partition) |>
  ggplot(aes(x = user_age, y = mean_duration)) +
  geom_area()
```

<details>
  
<summary>Session info</summary>

```{r sessioninfo, echo = FALSE}
## Reproducibility info
options(width = 120)
devtools::session_info()
```

</details>

