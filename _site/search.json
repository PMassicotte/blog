[
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "[1] E. Asmala, P. Massicotte, and J. Carstensen. “Identification of dissolved organic matter size components in freshwater and marine environments”. En. In: Limnology and Oceanography (Jan. 2021), p. lno.11692. ISSN: 0024-3590, 1939-5590. DOI: 10.1002/lno.11692. (Visited on 04/16/2021).\n[2] P. Massicotte, R. M. W. Amon, D. Antoine, P. Archambault, S. Balzano, S. Bélanger, R. Benner, D. Boeuf, A. Bricaud, F. Bruyant, G. Chaillou, M. Chami, B. Charrière, J. Chen, H. Claustre, P. Coupel, N. Delsaut, D. Doxaran, J. Ehn, C. Fichot, M. Forget, P. Fu, J. Gagnon, N. Garcia, B. Gasser, J. Ghiglione, G. Gorsky, M. Gosselin, P. Gourvil, Y. Gratton, P. Guillot, H. J. Heipieper, S. Heussner, S. B. Hooker, Y. Huot, C. Jeanthon, W. Jeffrey, F. Joux, K. Kawamura, B. Lansard, E. Leymarie, H. Link, C. Lovejoy, C. Marec, D. Marie, J. Martin, J. Martín, G. Massé, A. Matsuoka, V. McKague, A. Mignot, W. L. Miller, J. Miquel, A. Mucci, K. Ono, E. Ortega-Retuerta, C. Panagiotopoulos, T. Papakyriakou, M. Picheral, L. Prieur, P. Raimbault, J. Ras, R. A. Reynolds, A. Rochon, J. Rontani, C. Schmechtig, S. Schmidt, R. Sempéré, Y. Shen, G. Song, D. Stramski, E. Tachibana, A. Thirouard, I. Tolosa, J. Tremblay, M. Vaïtilingom, D. Vaulot, F. Vaultier, J. K. Volkman, H. Xie, G. Zheng, and M. Babin. “The MALINA oceanographic expedition: how do changes in ice cover, permafrost and UV radiation impact biodiversity and biogeochemical fluxes in the Arctic Ocean?” En. In: Earth System Science Data 13.4 (Apr. 2021), pp. 1561-1592. ISSN: 1866-3516. DOI: 10.5194/essd-13-1561-2021. (Visited on 04/16/2021).\n[3] G. Castellani, F. L. Schaafsma, S. Arndt, B. A. Lange, I. Peeken, J. Ehrlich, C. David, R. Ricker, T. Krumpen, S. Hendricks, S. Schwegmann, P. Massicotte, and H. Flores. “Large-scale variability of physical and biological sea-ice properties in polar oceans”. In: Frontiers in Marine Science 7.August (Aug. 2020). tex.ids= castellani2020, pp. 1-22. ISSN: 2296-7745. DOI: 10.3389/fmars.2020.00536.\n[4] M. Giacomazzo, A. Bertolo, P. Brodeur, P. Massicotte, J. Goyette, and P. Magnan. “Linking fisheries to land use: How anthropogenic inputs from the watershed shape fish habitat quality”. In: Science of The Total Environment 717 (May. 2020), p. 135377. ISSN: 00489697. DOI: 10.1016/j.scitotenv.2019.135377.\n[5] I. Laurion, P. Massicotte, F. Mazoyer, K. Negandhi, and N. Mladenov. “Weak mineralization despite strong processing of dissolved organic matter in Eastern Arctic tundra ponds”. In: Limnology and Oceanography (Oct. 2020), p. lno.11634. ISSN: 0024-3590. DOI: 10.1002/lno.11634.\n[6] P. Massicotte, R. Amiraux, Marie-Pier Amyot, P. Archambault, M. Ardyna, L. Arnaud, L. Artigue, C. Aubry, P. Ayotte, G. Bécu, S. Bélanger, R. Benner, H. C. Bittig, A. Bricaud, É. Brossier, F. Bruyant, L. Chauvaud, D. Christiansen-Stowe, H. Claustre, V. Cornet-Barthaux, P. Coupel, C. Cox, A. Delaforge, T. Dezutter, C. Dimier, F. Domine, F. Dufour, C. Dufresne, D. Dumont, J. Ehn, B. Else, J. Ferland, M. Forget, L. Fortier, M. Galí, V. Galindo, M. Gallinari, N. Garcia, C. Gérikas Ribeiro, M. Gourdal, P. Gourvil, C. Goyens, P. Grondin, P. Guillot, C. Guilmette, M. Houssais, F. Joux, L. Lacour, T. Lacour, A. Lafond, J. Lagunas, C. Lalande, J. Laliberté, S. Lambert-Girard, J. Larivière, J. Lavaud, A. LeBaron, K. Leblanc, F. Le Gall, J. Legras, M. Lemire, M. Levasseur, E. Leymarie, A. Leynaert, A. Lopes dos Santos, A. Lourenço, D. Mah, C. Marec, D. Marie, N. Martin, C. Marty, S. Marty, G. Massé, A. Matsuoka, L. Matthes, B. Moriceau, P. Muller, C. Mundy, G. Neukermans, L. Oziel, C. Panagiotopoulos, J. Pangrazi, G. Picard, M. Picheral, F. Pinczon du Sel, N. Pogorzelec, I. Probert, B. Quéguiner, P. Raimbault, J. Ras, E. Rehm, E. Reimer, J. Rontani, S. Rysgaard, B. Saint-Béat, M. Sampei, J. Sansoulet, C. Schmechtig, S. Schmidt, R. Sempéré, C. Sévigny, Y. Shen, M. Tragin, J. Tremblay, D. Vaulot, G. Verin, F. Vivier, A. Vladoiu, J. Whitehead, and M. Babin. “Green Edge ice camp campaigns: understanding the processes controlling the under-ice Arctic phytoplankton spring bloom”. In: Earth System Science Data 12.1 (Jan. 2020), pp. 151-176. ISSN: 1866-3516. DOI: 10.5194/essd-12-151-2020.\n[7] P. Massicotte, R. Amon, D. Antoine, P. Archambault, S. Balzano, S. Bélanger, R. Benner, D. Boeuf, A. Bricaud, F. Bruyant, G. Chaillou, M. Chami, B. Charrière, J. Chen, H. Claustre, P. Coupel, N. Delsaut, D. Doxaran, J. Ehn, C. Fichot, M. Forget, P. Fu, J. Gagnon, N. Garcia, B. Gasser, J. Ghiglione, G. Gorsky, M. Gosselin, P. Gourvil, Y. Gratton, P. Guillot, H. J. Heipieper, S. Heussner, S. Hooker, Y. Huot, V. Jacq, C. Jeanthon, W. Jeffrey, F. Joux, K. Kawamura, B. Lansard, E. Leymarie, H. Link, C. Lovejoy, C. Marec, D. Marie, J. Martin, G. Massé, A. Matsuoka, V. McKague, A. Mignot, W. L. Miller, J. Miquel, A. Mucci, K. Ono, E. Ortega, C. Panagiotopoulos, T. Papakyriakou, J. Para, M. Picheral, D. Piepenburg, L. Prieur, P. Raimbault, J. Ras, R. A. Reynolds, A. Rochon, J. Rontani, C. Schmechtig, S. Schmidt, R. Sempéré, Y. Shen, G. Song, D. Stramski, D. Stroud G., E. Tachibana, A. Thirouard, I. Tolosa, J. Tremblay, M. Vaïtilingom, D. Vaulot, F. Vaultier, J. K. Volkman, J. E. Vonk, H. Xie, G. Zheng, and M. Babin. “The Malina oceanographic expedition: How do changes in ice cover, permafrost and UV radiation impact on biodiversity and biogeochemical fluxes in the Arctic Ocean?” (2020). Publisher: SEANOE. DOI: 10.17882/75345.\n[8] P. Morin, T. Lacour, P. Grondin, F. Bruyant, J. Ferland, M. Forget, P. Massicotte, N. Donaher, D. A. Campbell, J. Lavaud, and M. Babin. “Response of the sea‐ice diatom Fragilariopsis cylindrus to simulated polar night darkness and return to light”. In: Limnology and Oceanography 65.5 (May. 2020), pp. 1041-1060. ISSN: 0024-3590. DOI: 10.1002/lno.11368.\n[9] L. Oziel, A. Baudena, M. Ardyna, P. Massicotte, A. Randelhoff, J. Sallée, R. B. Ingvaldsen, E. Devred, and M. Babin. “Faster Atlantic currents drive poleward expansion of temperate phytoplankton in the Arctic Ocean”. In: Nature Communications 11.1 (Dec. 2020), p. 1705. ISSN: 2041-1723. DOI: 10.1038/s41467-020-15485-5.\n[10] F. Yang, G. Song, P. Massicotte, H. Wei, and H. Xie. “Depth‐resolved photochemical lability of dissolved organic matter in the western tropical Pacific Ocean”. In: Journal of Geophysical Research: Biogeosciences (Mar. 2020). ISSN: 2169-8953. DOI: 10.1029/2019JG005425.\n[11] K. Blix, J. Li, P. Massicotte, and A. Matsuoka. “Developing a new machine-learning algorithm for estimating chlorophyll-a concentration in optically complex waters: A case study for high northern latitude waters by using sentinel 3 OLCI”. In: Remote Sensing 2019, Vol. 11, Page 2076 11.18 (Sep. 2019). Publisher: Multidisciplinary Digital Publishing Institute, p. 2076. DOI: 10.3390/RS11182076.\n[12] F. Cusset, J. Fort, M. Mallory, B. Braune, P. Massicotte, and G. Massé. “Arctic seabirds and shrinking sea ice: egg analyses reveal the importance of ice-derived resources”. In: Scientific Reports 9.1 (Dec. 2019), p. 15405. ISSN: 2045-2322. DOI: 10.1038/s41598-019-51788-4.\n[13] P. Grondin, J. Ferland, P. Massicotte, V. Galindo, J. Ras, H. Claustre, N. Garcia, P. Raimbault, P. Coupel, J. Tremblay, M. Forget, L. Karp-Boss, and M. Babin. “Protists‌ ‌succession‌ ‌from‌ ‌ice‌ ‌algae‌ ‌to‌ ‌under-ice‌ ‌phytoplankton‌ spring‌ ‌blooms‌ ‌in‌ ‌Baffin‌ ‌Bay‌”. In: in prep. in prep (2019).\n[14] Y. Li, G. Song, P. Massicotte, F. Yang, R. Li, and H. Xie. “Distribution, seasonality, and fluxes of dissolved organic matter in the Pearl River (Zhujiang) estuary, China”. In: Biogeosciences 16.13 (Jul. 2019), pp. 2751-2770. ISSN: 1726-4189. DOI: 10.5194/bg-16-2751-2019.\n[15] P. Massicotte, R. Amiraux, M. Amyot, P. Archambault, M. Ardyna, L. Arnaud, L. Artigue, C. Aubry, P. Ayotte, G. Bécu, S. Bélanger, R. Benner, H. C. Bittig, A. Bricaud, É. Brossier, F. Bruyant, L. Chauvaud, D. Christiansen-Stowe, H. Claustre, V. Cornet-Barthaux, P. Coupel, C. Cox, A. Delaforge, T. Dezutter, C. Dimier, F. Dominé, F. Dufour, C. Dufresne, D. Dumont, J. Ehn, B. Else, J. Ferland, M. Forget, L. Fortier, M. Galí, V. Galindo, M. Gallinari, N. Garcia, C. Gérikas-Ribeiro, M. Gourdal, P. Gourvil, C. Goyens, P. Grondin, P. Guillot, C. Guilmette, M. Houssais, F. Joux, L. Lacour, T. Lacour, A. Lafond, J. Lagunas, C. Lalande, J. Laliberté, S. Lambert-Girard, J. Larivière, J. Lavaud, A. Lebaron, K. Leblanc, F. Le Gall, J. Legras, M. Lemire, M. Levasseur, E. Leymarie, A. Leynaert, A. Lopes Dos Santos, A. Lourenço, D. Mah, C. Marec, D. Marie, N. Martin, C. Marty, S. Marty, G. Massé, A. Matsuoka, L. Matthes, B. Moriceau, P. Muller, C. J. Mundy, G. Neukermans, L. Oziel, C. Panagiotopoulos, J. Pangazi, G. Picard, M. Picheral, F. Pinczon Du Sel, N. Pogorzelec, I. Probert, B. Queguiner, P. Raimbault, J. Ras, E. Rehm, E. Reimer, J. Rontani, S. Rysgaard, B. Saint-Béat, M. Sampei, J. Sansoulet, S. Schmidt, R. Sempéré, C. Sévigny, Y. Shen, M. Tragin, J. Tremblay, D. Vaulot, G. Verin, F. Vivier, A. Vladoiu, J. Whitehead, and M. Babin. “The Green Edge initiative: understanding the processes controlling the under-ice Arctic phytoplankton spring bloom”. (2019). Publisher: SEANOE. DOI: 10.17882/59892.\n[16] P. Massicotte, I. Peeken, C. Katlein, H. Flores, Y. Huot, G. Castellani, S. Arndt, B. A. Lange, J. Tremblay, and M. Babin. “Sensitivity of phytoplankton primary production estimates to available irradiance under heterogeneous sea ice conditions”. In: Journal of Geophysical Research: Oceans (Aug. 2019), p. 2019JC015007. ISSN: 2169-9275. DOI: 10.1029/2019JC015007.\n[17] L. Oziel, P. Massicotte, A. Randelhoff, J. Ferland, A. Vladoiu, L. Lacour, V. Galindo, S. Lambert-Girard, D. Dumont, Y. Cuypers, P. Bouruet-Aubertot, C. Mundy, J. Ehn, G. Bécu, C. Marec, M. Forget, N. Garcia, P. Coupel, P. Raimbault, M. Houssais, and M. Babin. “Environmental factors influencing the seasonal dynamics of spring algal blooms in and beneath sea ice in western Baffin Bay”. In: Elem Sci Anth 7.1 (Aug. 2019), p. 34. ISSN: 2325-1026. DOI: 10.1525/elementa.372.\n[18] A. Randelhoff, L. Oziel, P. Massicotte, G. Bécu, M. Galí, L. Lacour, D. Dumont, A. Vladoiu, C. Marec, F. Bruyant, M. Houssais, J. Tremblay, G. Deslongchamps, and M. Babin. “The evolution of light and vertical mixing across a phytoplankton ice-edge bloom”. In: Elem Sci Anth 7.1 (May. 2019), p. 20. ISSN: 2325-1026. DOI: 10.1525/elementa.357.\n[19] E. Asmala, L. Haraguchi, H. H. Jakobsen, P. Massicotte, and J. Carstensen. “Nutrient availability as major driver of phytoplankton-derived dissolved organic matter transformation in coastal environment”. In: Biogeochemistry 137.1-2 (Jan. 2018). Publisher: Springer International Publishing, pp. 93-104. ISSN: 0168-2563. DOI: 10.1007/s10533-017-0403-0.\n[20] E. Asmala, L. Haraguchi, S. Markager, P. Massicotte, B. Riemann, P. A. Staehr, and J. Carstensen. “Eutrophication leads to accumulation of recalcitrant autochthonous organic matter in coastal environment”. In: Global Biogeochemical Cycles (Nov. 2018), pp. 1-15. ISSN: 08866236. DOI: 10.1029/2017GB005848.\n[21] L. P. M. Brandão, L. S. Brighenti, P. A. Staehr, E. Asmala, P. Massicotte, D. Tonetta, F. A. R. Barbosa, D. Pujoni, and J. F. Bezerra-Neto. “Distinctive effects of allochthonous and autochthonous organic matter on CDOM spectra in a tropical lake”. In: Biogeosciences 15.9 (May. 2018), pp. 2931-2943. ISSN: 1726-4189. DOI: 10.5194/bg-15-2931-2018.\n[22] E. Kristensen, M. Madsen-Østerbye, P. Massicotte, O. Pedersen, S. Markager, and T. Kragh. “Catchment tracers reveal discharge, recharge and sources of groundwater-borne pollutants in a novel lake modelling approach”. In: Biogeosciences 15.4 (Feb. 2018), pp. 1203-1216. ISSN: 1726-4189. DOI: 10.5194/bg-15-1203-2018.\n[23] P. Massicotte, G. Bécu, S. Lambert-Girard, E. Leymarie, and M. Babin. “Estimating underwater light regime under spatially heterogeneous sea ice in the arctic”. In: Applied Sciences 8.12 (Dec. 2018), p. 2693. ISSN: 2076-3417. DOI: 10.3390/app8122693.\n[24] L. Qi, H. Xie, J. Gagné, G. Chaillou, P. Massicotte, and G. Yang. “Photoreactivities of two distinct dissolved organic matter pools in groundwater of a subarctic island”. In: Marine Chemistry 202.March (May. 2018). Publisher: Elsevier, pp. 97-120. ISSN: 03044203. DOI: 10.1016/j.marchem.2018.03.003.\n[25] P. Massicotte, E. Asmala, C. Stedmon, and S. Markager. “Global distribution of dissolved organic matter along the aquatic continuum: Across rivers, lakes and oceans”. In: Science of The Total Environment 609.C (Dec. 2017), pp. 180-191. ISSN: 00489697. DOI: 10.1016/j.scitotenv.2017.07.076.\n[26] P. Massicotte, C. Stedmon, and S. Markager. “Spectral signature of suspended fine particulate material on light absorption properties of CDOM”. In: Marine Chemistry 196 (Aug. 2017). ISSN: 03044203. DOI: 10.1016/j.marchem.2017.07.005.\n[27] A. A. Assani, R. Landry, O. Azouaoui, P. Massicotte, and D. Gratton. “Comparison of the characteristics (frequency and timing) of drought and wetness indices of annual mean water levels in the five north american great lakes”. In: Water Resources Management 30.1 (Jan. 2016), pp. 359-373. ISSN: 0920-4741. DOI: 10.1007/s11269-015-1166-9.\n[28] T. Lambert, S. Bouillon, F. Darchambeau, P. Massicotte, and A. V. Borges. “Shift in the chemical composition of dissolved organic matter in the Congo River network”. In: Biogeosciences Discussions (Jun. 2016), pp. 1-49. ISSN: 1810-6285. DOI: 10.5194/bg-2016-240.\n[29] T. Lambert, C. R. C. Teodoru, F. F. C. Nyoni, S. Bouillon, F. Darchambeau, P. Massicotte, and A. V. A. Borges. “Along-stream transport and transformation of dissolved organic matter in a large tropical river”. In: Biogeosciences 13.9 (May. 2016), pp. 2727-2741. ISSN: 1726-4189. DOI: 10.5194/bg-13-2727-2016.\n[30] P. Massicotte. “eemR: eemR 0.1.4”. (Aug. 2016). DOI: 10.5281/zenodo.61080.\n[31] P. Massicotte. “Package cdom: R functions to model CDOM spectra”. (2016).\n[32] P. Massicotte and S. Markager. “Using a Gaussian decomposition approach to model absorption spectra of chromophoric dissolved organic matter”. In: Marine Chemistry 180 (Mar. 2016), pp. 24-32. ISSN: 03044203. DOI: 10.1016/j.marchem.2016.01.008.\n[33] M. Beauchamp, A. A. Assani, R. Landry, and P. Massicotte. “Temporal variability of the magnitude and timing of winter maximum daily flows in southern Quebec (Canada)”. In: Journal of Hydrology 529 (Oct. 2015), pp. 410-417. ISSN: 00221694. DOI: 10.1016/j.jhydrol.2015.07.053.\n[34] P. Bombenger and P. Massicotte. “Mathématiques et Géographie – Déchiffrer ou des chiffres et la Terre : Apports des concepts mathématiques à la géographie”. In: Pourquoi les mathématiques. Ed. by Guillaume Tomasini. Section: fghfghfghf. Ellipses markeing, 2015, p. 288. ISBN: 978-2-340-00548-8.\n[35] T. Lambert, F. Darchambeau, S. Bouillon, B. Alhou, J. J. Mbega, C. R. C. Teodoru, F. F. C. Nyoni, P. Massicotte, and A. V. A. Borges. “Landscape control on the spatial and temporal variability of chromophoric dissolved organic matter and dissolved organic carbon in large african rivers”. In: Ecosystems 18.7 (Nov. 2015). ISBN: 8224406113, pp. 1224-1239. ISSN: 1432-9840. DOI: 10.1007/s10021-015-9894-5.\n[36] P. Massicotte, A. Bertolo, P. Brodeur, C. Hudon, M. Mingelbier, and P. Magnan. “Influence of the aquatic vegetation landscape on larval fish abundance”. In: Journal of Great Lakes Research 41.3 (Sep. 2015), pp. 873-880. ISSN: 03801330. DOI: 10.1016/j.jglr.2015.05.010.\n[37] P. Massicotte, R. Proulx, G. Cabana, and M. A. Rodríguez. “Testing the influence of environmental heterogeneity on fish species richness in two biogeographic provinces”. In: PeerJ 3 (Feb. 2015), p. e760. ISSN: 2167-8359. DOI: 10.7717/peerj.760.\n[38] S. Biron, A. A. Assani, J. Frenette, and P. Massicotte. “Comparison of Lake Ontario and St. Lawrence River hydrologic droughts and their relationship to climate indices”. In: Water Resources Research 50.2 (Feb. 2014), pp. 1396-1409. ISSN: 00431397. DOI: 10.1002/2012WR013441.\n[39] P. Massicotte, J. Frenette, R. Proulx, B. Pinel-Alloul, and A. Bertolo. “Riverscape heterogeneity explains spatial variation in zooplankton functional evenness and biomass in a large river ecosystem”. In: Landscape Ecology 29.1 (Jan. 2014), pp. 67-79. ISSN: 0921-2973. DOI: 10.1007/s10980-013-9946-1.\n[40] R. Proulx, P. Massicotte, and M. Pépino. “Googling trends in conservation biology”. In: Conservation Biology 28.1 (Feb. 2014). ISBN: 1523-1739, pp. 44-51. ISSN: 08888892. DOI: 10.1111/cobi.12131.\n[41] P. Massicotte, A. A. Assani, D. Gratton, and J. J. Frenette. “Relationship between water color, water levels, and climate indices in large rivers: Case of the St. Lawrence River (Canada)”. In: Water Resources Research 49.4 (Apr. 2013), pp. 2303-2307. ISSN: 00431397. DOI: 10.1002/wrcr.20203.\n[42] P. Massicotte and J. Frenette. “A mechanistic-based framework to understand how dissolved organic carbon is processed in a large fluvial lake”. In: Limnology and Oceanography: Fluids and Environments 3.1 (Feb. 2013). ISBN: 2157368923729, pp. 139-155. ISSN: 21573689. DOI: 10.1215/21573689-2372976.\n[43] P. Massicotte, D. Gratton, J. Frenette, and A. A. Assani. “Spatial and temporal evolution of the St. Lawrence River spectral profile: A 25-year case study using Landsat 5 and 7 imagery”. In: Remote Sensing of Environment 136 (Sep. 2013). Publisher: Elsevier B.V, pp. 433-441. ISSN: 00344257. DOI: 10.1016/j.rse.2013.05.028.\n[44] J. Frenette, P. Massicotte, and J. Lapierre. “Colorful niches of phytoplankton shaped by the spatial connectivity in a large river ecosystem: A riverscape perspective”. In: PLoS ONE 7.4 (Apr. 2012). tex.address: Departement de Chimie-Biologie, Universite du Quebec a Trois-Rivieres, Trois-Rivieres, Quebec, Canada. Jean-Jacques.Frenette@uqtr.ca, p. e35891. ISSN: 1932-6203. DOI: 10.1371/journal.pone.0035891.\n[45] J. Pommier, J. J. Frenette, P. Massicotte, J. J. Lapierre, and H. Glémet. “Seston fatty acid composition and copepod RNA:DNA ratio with respect to the underwater light climate in fluvial Lac Saint-Pierre”. In: Aquatic Sciences 74.3 (Feb. 2012). Publisher: SPRINGER BASEL AG, pp. 539-553. ISSN: 1015-1621. DOI: 10.1007/s00027-011-0246-z.\n[46] P. Massicotte and J. J. Frenette. “Spatial connectivity in a large river system: resolving the sources and fate of dissolved organic matter”. In: Ecological Applications 21.7 (Oct. 2011), pp. 2600-2617. ISSN: 1051-0761. DOI: 10.1890/10-1475.1.\n[47] P. Massicotte, L. Badri, and M. Badri. “Towards a tool supporting integration testing of aspect-oriented programs”. In: Journal of Object Technology 6.1 (2007). Publisher: Citeseer, pp. 67-89. ISSN: 16601769.\n[48] P. Massicotte, L. Badri, and M. Badri. “Aspects-classes integration testing strategy: An incremental approach”. In: Lecture notes in computer science (including subseries lecture notes in artificial intelligence and lecture notes in bioinformatics). 2006. DOI: 10.1007/11751113_12.\n[49] P. Massicotte, L. Badri, and M. Badri. “Rapid integration of software engineering techniques”. In: Rapid integration of software engineering techniques. Ed. by N. Guelfi and A. Savidis. Vol. 3943. Lecture notes in computer science. Berlin, Heidelberg: Springer Berlin Heidelberg, 2006, pp. 158-173. ISBN: 978-3-540-34063-8. DOI: 10.1007/11751113.\n[50] P. Massicotte, M. Badri, and L. Badri. “Generating aspects-classes integration testing sequences a collaboration diagram based strategy”. In: Third ACIS int’l conference on software engineering research, management and applications (SERA’05). IEEE, 2005, pp. 30-37. ISBN: 0-7695-2297-1. DOI: 10.1109/SERA.2005.43."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Philippe Massicotte. As a numerical ecologist, the R statistical computing language is an important part of my daily workflow. I mainly use R for environmental modelling and data manipulation."
  },
  {
    "objectID": "about.html#current-research",
    "href": "about.html#current-research",
    "title": "About",
    "section": "Current research",
    "text": "Current research\nI am currently working as a research associate at the Takuvik Joint International Laboratory under the supervision of Dr. Marcel Babin.\nSome researches I am currently working on:\n\nUnderstand how surrounding landscapes of aquatic ecosystems determine the biogeocycling of dissolved organic matter (DOM).\nUnderstand how DOM, as the main agent driving the optical properties of aquatic ecosystems, influences their functioning.\nQuantify how the complex mosaic composed of ice, snow, leads, melt ponds and open water influence underwater light regime in aquatic ecosystems.\nInfluence of available irradiance under heterogeneous sea-ice conditions on phytoplankton primary production estimates.\n\nI am always looking for collaborations. Do not hesitate to contact me!"
  },
  {
    "objectID": "about.html#scientific-interests-no-specific-order",
    "href": "about.html#scientific-interests-no-specific-order",
    "title": "About",
    "section": "Scientific interests (no specific order)",
    "text": "Scientific interests (no specific order)\n\nAquatic ecosystems (limnology & oceanography)\nDissolved organic matter (DOM) and carbon cycling\nAquatic optic (fluorescence, absorbance, remote sensing)\nMathematics\nNumerical analyses/modelling (multivariate analyses, spatial analyses, system dynamic)\nScientific programming\nImage analysis\nGeomatic"
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Takuvik primary production model for the Arctic."
  },
  {
    "objectID": "presentations.html#green-edge-legacy-meeting-nice-france",
    "href": "presentations.html#green-edge-legacy-meeting-nice-france",
    "title": "Presentations",
    "section": "Green Edge legacy meeting (Nice, France)",
    "text": "Green Edge legacy meeting (Nice, France)\nPresentations given at the Green Edge legacy meeting.\n\nUnderice Kd\nhttps://pmassicotte.github.io/greenedge_2019_nice_kd/\n\n\nIce camp paper\nhttps://pmassicotte.github.io/greenedge_2019_nice_data_paper_ice_camp/"
  },
  {
    "objectID": "presentations.html#green-edge-side-meeting",
    "href": "presentations.html#green-edge-side-meeting",
    "title": "Presentations",
    "section": "Green Edge side meeting",
    "text": "Green Edge side meeting\nGreen Edge side meeting in Italia after the Gorodn conference.\nhttps://pmassicotte.github.io/greenedge2019/"
  },
  {
    "objectID": "presentations.html#numerical-ecology",
    "href": "presentations.html#numerical-ecology",
    "title": "Presentations",
    "section": "Numerical ecology",
    "text": "Numerical ecology\nNumerical ecology in R teaching material used at Aarhus university in March 2019.\nhttps://pmassicotte.github.io/stats-denmark-2019/"
  },
  {
    "objectID": "workshops.html",
    "href": "workshops.html",
    "title": "Workshops and teaching",
    "section": "",
    "text": "Introduction to ggplot2 visualization given at the Sentinel North community.\n\n\n\nSentinel North logo\n\n\nIntrodution to ggplot2"
  },
  {
    "objectID": "workshops.html#québec-océan-training-workshop",
    "href": "workshops.html#québec-océan-training-workshop",
    "title": "Workshops and teaching",
    "section": "Québec-Océan Training Workshop",
    "text": "Québec-Océan Training Workshop\nThe yearly Québec-Océan Training Workshop on data management and archiving aims at providing advices on good data managment practices. The workshop is given every year by 5-6 trainers.\n\n\n\nLogo of Quebec-Ocean\n\n\nQuébec-Océan Training Workshop: Data Management and Archiving"
  },
  {
    "objectID": "workshops.html#ivado-datatrek-introduction-to-ggplot2",
    "href": "workshops.html#ivado-datatrek-introduction-to-ggplot2",
    "title": "Workshops and teaching",
    "section": "IVADO Datatrek: introduction to ggplot2",
    "text": "IVADO Datatrek: introduction to ggplot2\nIntroduction to ggplot2 R package given at the IVADO 100 days of Data.trek.\n\n\n\nLogo of 100 days data trek\n\n\nIntrodution to ggplot2"
  },
  {
    "objectID": "workshops.html#r-à-québec",
    "href": "workshops.html#r-à-québec",
    "title": "Workshops and teaching",
    "section": "R à Québec",
    "text": "R à Québec\nPrésentation sur la programmation fonctionnelle avec R lors du symposium R à Québec 2019.\n\n\n\nLogo of r Québec 2019\n\n\nProgrammation fonctionnelle avec R"
  },
  {
    "objectID": "posts/2019-12-20-removing-borders-around-ggplot2-graphs/index.html",
    "href": "posts/2019-12-20-removing-borders-around-ggplot2-graphs/index.html",
    "title": "Removing borders around ggplot2 graphs",
    "section": "",
    "text": "Recently I was participating in the 30DayMapChallenge where people were invited to make a map based on a different daily theme for one whole month.\nWhen making a geographical map, or any other visualization where I wanted to use a forced coordinate system), choosing the right aspect ratio to save my graphics has always been challenging. Lately, when participating in the map challenge, Cédric Scherer made me realize that I was really struggling with white borders around my plots when it came the time to export them. He was right! :smile:"
  },
  {
    "objectID": "posts/2019-12-20-removing-borders-around-ggplot2-graphs/index.html#the-problem-with-choosing-the-right-aspect-ratio",
    "href": "posts/2019-12-20-removing-borders-around-ggplot2-graphs/index.html#the-problem-with-choosing-the-right-aspect-ratio",
    "title": "Removing borders around ggplot2 graphs",
    "section": "The problem with choosing the right aspect ratio",
    "text": "The problem with choosing the right aspect ratio\nLet’s make a simple map of the USA to illustrate the problem. In a markdown document, the generated graph looks good (i.e. no extra border) because knitr is taking care of this for me (more on that later).\n\n# Load the US shapefile\nstates <- st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE))\n\np <- states %>%\n  ggplot() +\n  geom_sf(size = 0.25) + #<<\n  coord_sf(crs = 2163) +\n  theme(\n    panel.border = element_blank(),\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    axis.ticks = element_blank(),\n    plot.background = element_rect(fill = \"#3c3c3c\"),\n    panel.background = element_rect(fill = \"#3c3c3c\")\n  )\n\np\n\n\n\n\n\n\n\nWhen it comes time to save my plots, I usually use the PDF format file unless they contain too much point. In that case, I will use the PNG format. When saving a graph in a file, however, it is difficult to find the right aspect ratio when using coordinate system that forces a specified ratio between the physical representation of data units on the axes (ex.: coord_fixed(), geom_sf() or coord_equal()). To visualize the problem, I will save the previous plot using two different aspect ratios and then import them in my document to show you the difficulty of finding the right aspect ratio.\nAspect ratio of 7/4\nChoosing an aspect ratio of 7/4 creates white borders on the sides of the plot.\n\n\n\n\nAspect ratio of 6/7\nChoosing an aspect ratio of 6/7 creates white borders at the bottom and the top of the plot.\n\n\n\n\nAs it can be seen in the two figures above, there are two large white borders located either on the sides or above/below of the graph. It is because I have used geom_sf() which set automatically the aspect ratio of the plot to respect the chosen geographical coordinate system. Of course, I could play around with trials and errors to find the best width and hight to use to save my plot.\nBut wait! There is a much better way to do it! :smirk: Actually, I found out there was a hidden gem in knitr that allows cropping (using either pdfcrop or convert functions) to remove borders around an image. In fact, this is the function that is used to automatically remove borders around images when knitting an R Markdown document in R (see the initial plot of this post without borders). The function knitr::plot_crop(x) (where x is the filename of the plot to be cropped) will trim any existing images on your hard drive.\nFirst, let’s create our plot in PDF format and use knitr::plot_crop() to remove the borders.\n\npdf_file <- \"images/fig_border.pdf\"\n\nggsave(\n  pdf_file,\n  device = cairo_pdf,\n  width = 5.51,\n  height = 4.68\n)\n\nknitr::plot_crop(pdf_file)\n#> [1] \"images/fig_border.pdf\"\n\nAt this point, the borders have been removed from the original PDF. But what if you want to export this PDF into a bitmap image? This can be achieved using a combination of pdftools::pdf_render_page() and png::writePNG(). pdftools::pdf_render_page() will take the filename of a PDF file and render into a raw bitmap array whereas png::writePNG() will actually save the bitmap into a file.\n\npng_file <- \"images/fig_border_cropped.png\"\n\nbitmap <- pdftools::pdf_render_page(pdf_file, dpi = 600)\npng::writePNG(bitmap, png_file)\n\n\nBang! No more borders around our plot 👍\n\nSession info\n\n#> ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.1 (2022-06-23)\n#>  os       Ubuntu 22.04 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Toronto\n#>  date     2022-07-30\n#>  pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  package       * version date (UTC) lib source\n#>  askpass         1.1     2019-01-13 [1] RSPM (R 4.2.0)\n#>  assertthat      0.2.1   2019-03-21 [1] RSPM (R 4.2.0)\n#>  backports       1.4.1   2021-12-13 [1] RSPM (R 4.2.0)\n#>  broom           1.0.0   2022-07-01 [1] RSPM (R 4.2.0)\n#>  cachem          1.0.6   2021-08-19 [1] RSPM (R 4.2.0)\n#>  callr           3.7.1   2022-07-13 [1] RSPM (R 4.2.0)\n#>  cellranger      1.1.0   2016-07-27 [1] RSPM (R 4.2.0)\n#>  class           7.3-20  2022-01-16 [2] CRAN (R 4.2.1)\n#>  classInt        0.4-7   2022-06-10 [1] CRAN (R 4.2.1)\n#>  cli             3.3.0   2022-04-25 [1] RSPM (R 4.2.0)\n#>  colorspace      2.0-3   2022-02-21 [1] RSPM (R 4.2.0)\n#>  crayon          1.5.1   2022-03-26 [1] RSPM (R 4.2.0)\n#>  DBI             1.1.3   2022-06-18 [1] RSPM (R 4.2.0)\n#>  dbplyr          2.2.1   2022-06-27 [1] RSPM (R 4.2.0)\n#>  devtools        2.4.4   2022-07-20 [1] RSPM (R 4.2.0)\n#>  digest          0.6.29  2021-12-01 [1] RSPM (R 4.2.0)\n#>  dplyr         * 1.0.9   2022-04-28 [1] RSPM (R 4.2.0)\n#>  e1071           1.7-11  2022-06-07 [1] CRAN (R 4.2.1)\n#>  ellipsis        0.3.2   2021-04-29 [1] RSPM (R 4.2.0)\n#>  evaluate        0.15    2022-02-18 [1] RSPM (R 4.2.0)\n#>  extrafont       0.18    2022-04-12 [1] RSPM (R 4.2.0)\n#>  extrafontdb     1.0     2012-06-11 [1] RSPM (R 4.2.0)\n#>  fansi           1.0.3   2022-03-24 [1] RSPM (R 4.2.0)\n#>  farver          2.1.1   2022-07-06 [1] RSPM (R 4.2.0)\n#>  fastmap         1.1.0   2021-01-25 [1] RSPM (R 4.2.0)\n#>  forcats       * 0.5.1   2021-01-27 [1] RSPM (R 4.2.0)\n#>  fs              1.5.2   2021-12-08 [1] RSPM (R 4.2.0)\n#>  gargle          1.2.0   2021-07-02 [1] RSPM (R 4.2.0)\n#>  generics        0.1.3   2022-07-05 [1] RSPM (R 4.2.0)\n#>  ggplot2       * 3.3.6   2022-05-03 [1] RSPM (R 4.2.0)\n#>  ggpmthemes    * 0.0.2   2022-07-29 [1] Github (pmassicotte/ggpmthemes@993d61e)\n#>  glue            1.6.2   2022-02-24 [1] RSPM (R 4.2.0)\n#>  googledrive     2.0.0   2021-07-08 [1] RSPM (R 4.2.0)\n#>  googlesheets4   1.0.0   2021-07-21 [1] RSPM (R 4.2.0)\n#>  gtable          0.3.0   2019-03-25 [1] RSPM (R 4.2.0)\n#>  haven           2.5.0   2022-04-15 [1] RSPM (R 4.2.0)\n#>  hms             1.1.1   2021-09-26 [1] RSPM (R 4.2.0)\n#>  htmltools       0.5.3   2022-07-18 [1] RSPM (R 4.2.0)\n#>  htmlwidgets     1.5.4   2021-09-08 [1] RSPM (R 4.2.0)\n#>  httpuv          1.6.5   2022-01-05 [1] RSPM (R 4.2.0)\n#>  httr            1.4.3   2022-05-04 [1] RSPM (R 4.2.0)\n#>  jsonlite        1.8.0   2022-02-22 [1] RSPM (R 4.2.0)\n#>  KernSmooth      2.23-20 2021-05-03 [2] CRAN (R 4.2.1)\n#>  knitr           1.39    2022-04-26 [1] RSPM (R 4.2.0)\n#>  later           1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#>  lifecycle       1.0.1   2021-09-24 [1] RSPM (R 4.2.0)\n#>  lubridate       1.8.0   2021-10-07 [1] RSPM (R 4.2.0)\n#>  magrittr        2.0.3   2022-03-30 [1] RSPM (R 4.2.0)\n#>  maps            3.4.0   2021-09-25 [1] CRAN (R 4.2.1)\n#>  memoise         2.0.1   2021-11-26 [1] RSPM (R 4.2.0)\n#>  mime            0.12    2021-09-28 [1] RSPM (R 4.2.0)\n#>  miniUI          0.1.1.1 2018-05-18 [1] RSPM (R 4.2.0)\n#>  modelr          0.1.8   2020-05-19 [1] RSPM (R 4.2.0)\n#>  munsell         0.5.0   2018-06-12 [1] RSPM (R 4.2.0)\n#>  pdftools        3.3.0   2022-07-07 [1] RSPM (R 4.2.0)\n#>  pillar          1.8.0   2022-07-18 [1] RSPM (R 4.2.0)\n#>  pkgbuild        1.3.1   2021-12-20 [1] RSPM (R 4.2.0)\n#>  pkgconfig       2.0.3   2019-09-22 [1] RSPM (R 4.2.0)\n#>  pkgload         1.3.0   2022-06-27 [1] RSPM (R 4.2.0)\n#>  png             0.1-7   2013-12-03 [1] RSPM (R 4.2.0)\n#>  prettyunits     1.1.1   2020-01-24 [1] RSPM (R 4.2.0)\n#>  processx        3.7.0   2022-07-07 [1] RSPM (R 4.2.0)\n#>  profvis         0.3.7   2020-11-02 [1] RSPM (R 4.2.0)\n#>  promises        1.2.0.1 2021-02-11 [1] RSPM (R 4.2.0)\n#>  proxy           0.4-27  2022-06-09 [1] CRAN (R 4.2.1)\n#>  ps              1.7.1   2022-06-18 [1] RSPM (R 4.2.0)\n#>  purrr         * 0.3.4   2020-04-17 [1] RSPM (R 4.2.0)\n#>  qpdf            1.2.0   2022-05-29 [1] CRAN (R 4.2.1)\n#>  R6              2.5.1   2021-08-19 [1] RSPM (R 4.2.0)\n#>  ragg            1.2.2   2022-02-21 [1] RSPM (R 4.2.0)\n#>  Rcpp            1.0.9   2022-07-08 [1] RSPM (R 4.2.0)\n#>  readr         * 2.1.2   2022-01-30 [1] RSPM (R 4.2.0)\n#>  readxl          1.4.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  remotes         2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#>  reprex          2.0.1   2021-08-05 [1] RSPM (R 4.2.0)\n#>  rlang           1.0.4   2022-07-12 [1] RSPM (R 4.2.0)\n#>  rmarkdown       2.14    2022-04-25 [1] RSPM (R 4.2.0)\n#>  rspm            0.1.0.3 2022-07-27 [1] Github (Enchufa2/rspm@ba091ae)\n#>  rstudioapi      0.13    2020-11-12 [1] RSPM (R 4.2.0)\n#>  Rttf2pt1        1.3.10  2022-02-07 [1] RSPM (R 4.2.0)\n#>  rvest           1.0.2   2021-10-16 [1] RSPM (R 4.2.0)\n#>  s2              1.1.0   2022-07-18 [1] CRAN (R 4.2.1)\n#>  scales          1.2.0   2022-04-13 [1] RSPM (R 4.2.0)\n#>  sessioninfo     1.2.2   2021-12-06 [1] RSPM (R 4.2.0)\n#>  sf            * 1.0-8   2022-07-14 [1] RSPM (R 4.2.0)\n#>  shiny           1.7.2   2022-07-19 [1] RSPM (R 4.2.0)\n#>  stringi         1.7.8   2022-07-11 [1] RSPM (R 4.2.0)\n#>  stringr       * 1.4.0   2019-02-10 [1] RSPM (R 4.2.0)\n#>  systemfonts     1.0.4   2022-02-11 [1] CRAN (R 4.2.1)\n#>  textshaping     0.3.6   2021-10-13 [1] RSPM (R 4.2.0)\n#>  tibble        * 3.1.8   2022-07-22 [1] RSPM (R 4.2.0)\n#>  tidyr         * 1.2.0   2022-02-01 [1] RSPM (R 4.2.0)\n#>  tidyselect      1.1.2   2022-02-21 [1] RSPM (R 4.2.0)\n#>  tidyverse     * 1.3.2   2022-07-18 [1] RSPM (R 4.2.0)\n#>  tzdb            0.3.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  units           0.8-0   2022-02-05 [1] RSPM (R 4.2.0)\n#>  urlchecker      1.0.1   2021-11-30 [1] RSPM (R 4.2.0)\n#>  usethis         2.1.6   2022-05-25 [1] CRAN (R 4.2.1)\n#>  utf8            1.2.2   2021-07-24 [1] RSPM (R 4.2.0)\n#>  vctrs           0.4.1   2022-04-13 [1] RSPM (R 4.2.0)\n#>  withr           2.5.0   2022-03-03 [1] RSPM (R 4.2.0)\n#>  wk              0.6.0   2022-01-03 [1] CRAN (R 4.2.1)\n#>  xfun            0.31    2022-05-10 [1] RSPM (R 4.2.0)\n#>  xml2            1.3.3   2021-11-30 [1] RSPM (R 4.2.0)\n#>  xtable          1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#>  yaml            2.3.5   2022-02-21 [1] RSPM (R 4.2.0)\n#> \n#>  [1] /home/filoche/R/x86_64-pc-linux-gnu-library/4.2\n#>  [2] /opt/R/4.2.1/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#arctic-sea-ice-extent",
    "href": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#arctic-sea-ice-extent",
    "title": "Visualizing the decrease of Artic sea ice extent",
    "section": "Arctic sea ice extent",
    "text": "Arctic sea ice extent\nIt is well known that the Arctic sea ice extent is decreasing at an increasing pace. As stated by the National Snow & Ice Data Center:\n\nAccording to scientific measurements, both the thickness and extent of summer sea ice in the Arctic have shown a dramatic decline over the past thirty years. This is consistent with observations of a warming Arctic.\n\nThanks to the NSIDC, their data is available for download. For this post, I was interested in visualizing these scientific measurements.\n\n\n\n\nPhoto by Annie Spratt on Unsplash"
  },
  {
    "objectID": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#the-data",
    "href": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#the-data",
    "title": "Visualizing the decrease of Artic sea ice extent",
    "section": "The data",
    "text": "The data\nThe data consist of four variables:\n\n\nYear, Month, Day: Period of the measurements.\n\nExtent: Sea ice extent in millions km2.\n\n\n\n\n\nFew observations of the downloaded data.\n \n Year \n    Month \n    Day \n    Extent \n  \n\n\n 1978 \n    10 \n    26 \n    10.231 \n  \n\n 1978 \n    10 \n    28 \n    10.420 \n  \n\n 1978 \n    10 \n    30 \n    10.557 \n  \n\n 1978 \n    11 \n    1 \n    10.670 \n  \n\n 1978 \n    11 \n    3 \n    10.777 \n  \n\n 1978 \n    11 \n    5 \n    10.968 \n  \n\n 1978 \n    11 \n    7 \n    11.080 \n  \n\n 1978 \n    11 \n    9 \n    11.189 \n  \n\n 1978 \n    11 \n    11 \n    11.314 \n  \n\n 1978 \n    11 \n    13 \n    11.460"
  },
  {
    "objectID": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#temporal-evolution-of-the-arctic-sea-ice-extent",
    "href": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#temporal-evolution-of-the-arctic-sea-ice-extent",
    "title": "Visualizing the decrease of Artic sea ice extent",
    "section": "Temporal evolution of the Arctic sea ice extent",
    "text": "Temporal evolution of the Arctic sea ice extent\nFor the following visualization, I calculated the average and the standard deviation of sea ice extent for each month and each year."
  },
  {
    "objectID": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#rate-of-change-of-the-arctic-sea-ice-extent",
    "href": "posts/2019-08-23-visualizing-the-decrease-of-artic-sea-ice-extent/index.html#rate-of-change-of-the-arctic-sea-ice-extent",
    "title": "Visualizing the decrease of Artic sea ice extent",
    "section": "Rate of change of the Arctic sea ice extent",
    "text": "Rate of change of the Arctic sea ice extent\nThe previous graph has shown that Arctic sea ice is undoubtedly decreasing for the past few decades. But at which rate is it decreasing? Is the decreasing rate the same for all the months? The average decreasing rate of sea ice extent can be calculated by using the slope of a linear regression between year and sea ice extent.\n\n\n\n\n\n\n\n\nNow, we can visualize the yearly average sea ice extent decrease for each month.\n\n\n\n\n\n\n\n\nAnother way of visualizing the decrease in sea ice extent consists of using heat maps. In the following graphs, the minimum and maximum sea ice extent for each combination of month/year are presented. The graphs show that both the minimum and maximum sea ice extent are decreasing over time, which is more striking for the September month."
  },
  {
    "objectID": "posts/2019-07-17-trying-the-vroom-package/index.html",
    "href": "posts/2019-07-17-trying-the-vroom-package/index.html",
    "title": "Trying the new R vroom Package",
    "section": "",
    "text": "Many R packages can be used to read plain rectangular data files. Among them, readr and data.table are quite popular options. Recently, the vroom package have been published on CRAN by Jim Hester. While I do not know much about the technology behind the scene, Jim says:\nBecause I often have to read large data files, I decided to try this new promising package.\nIn the next sections, I will compare several methods to read a plain CSV file. The file I will be using contains bike commute data from capital bike share. The file contains roughly 170 000 observations and 9 variables.\nBecause the vroom() function can use a vector of files, I will duplicate file 10 times.\nI can now simply use this character vector with vroom(). Note that I can also use the .name_repair argument to clean column names."
  },
  {
    "objectID": "posts/2019-07-17-trying-the-vroom-package/index.html#benchmark",
    "href": "posts/2019-07-17-trying-the-vroom-package/index.html#benchmark",
    "title": "Trying the new R vroom Package",
    "section": "Benchmark",
    "text": "Benchmark\nOne advantage of vroom is its speed. In what follows, I will compare different methods to read the files vector that contains 10 files. I will also use the furrr package to use map in parallel.\n\nlibrary(furrr)\n\n# How many cores to use\nplan(multiprocess(workers = availableCores() - 1))\n\nres <- microbenchmark::microbenchmark(\n  vroom(files),\n  map_df(files, read_csv),\n  map_df(files, fread),\n  future_map_dfr(files, vroom),\n  future_map_dfr(files, read_csv),\n  future_map_dfr(files, fread), \n  times = 10\n)\n\nautoplot(res)\n\n\n\n\nAs we can see, the vroom package is the winner. It is even considerably faster than the versions using map in parallel, which surprises me! Please leave a message below if you have an explanation."
  },
  {
    "objectID": "posts/2019-07-17-trying-the-vroom-package/index.html#using-altrep",
    "href": "posts/2019-07-17-trying-the-vroom-package/index.html#using-altrep",
    "title": "Trying the new R vroom Package",
    "section": "Using Altrep",
    "text": "Using Altrep\nAnother feature of the vroom() function is that we can decide which column types are using Altrep. Setting altrep_opts = TRUE will enable Altrep for all column types. As seen below, this increases further the speed of the vroom() function.\n\nres <- microbenchmark::microbenchmark(\n  vroom(files),\n  vroom(files, altrep_opts = TRUE),\n  times = 10\n)\n\nWarning: The `altrep_opts` argument of `vroom()` is deprecated as of vroom 1.1.0.\nPlease use the `altrep` argument instead.\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n\nautoplot(res)\n\n\n\n\nBased on these results, I think that vroom will become part of my daily workflow from now on."
  },
  {
    "objectID": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html",
    "href": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html",
    "title": "Changing spatial resolution of a raster with terra",
    "section": "",
    "text": "Lately, I was working on a project and I needed to change the spatial resolution of a GeoTIFF to match that of another one. After looking around, I posted a question on Stackoverflow. After experimenting around, I decided to blog about my experience of changing the spatial resolution of GeoTIFF rasters.\nIn this post, we will explore two ways to change the spatial resolution of a raster:"
  },
  {
    "objectID": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html#aggregating-a-raster",
    "href": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html#aggregating-a-raster",
    "title": "Changing spatial resolution of a raster with terra",
    "section": "Aggregating a raster",
    "text": "Aggregating a raster\nI like to think that aggregating is the process of combining/merging the pixels of a raster and hence reducing its spatial resolution. When combining a set of neighbour pixels into a single pixel, one needs to define the statistical summary to be applied to the ensemble of the combined pixel. Such function can be the mean, median, min, maximum or any other function that produces a single numerical value.\nLet’s see how aggregation works using the terra R package. First, I will make a function that will be used to quickly display the pixel values of a raster.\n\nplot_raster <- function(r) {\n  plot(r, axes = FALSE, legend = FALSE)\n  plot(as.polygons(r, dissolve = FALSE, trunc = FALSE), add = TRUE)\n  text(r, digits = 2)\n}\n\nFor simplicity purposes, I will create a 4 by 4 raster containing values between 1 and 16.\n\nlibrary(terra)\n\n# Create a 4 x 4 matrix\nm <- matrix(1:16, ncol = 4, nrow = 4)\n\n# Convert the matrix into a raster\nr16 <- rast(m)\n\nr16\n#> class       : SpatRaster \n#> dimensions  : 4, 4, 1  (nrow, ncol, nlyr)\n#> resolution  : 1, 1  (x, y)\n#> extent      : 0, 4, 0, 4  (xmin, xmax, ymin, ymax)\n#> coord. ref. :  \n#> source      : memory \n#> name        : lyr.1 \n#> min value   :     1 \n#> max value   :    16\n\nUsing plot_raster(), we can display the value of each pixel within the raster.\n\nplot_raster(r16)\n\n\n\n\n\n\n\nImagine now that we would like to aggregate the raster r16 so it becomes a raster of 2 by 2 (i.e. 4 pixels). To achieve this, we can combine pixels 2 by 2 (horizontally and vertically) using the aggregate() function and the argument fact = 2.\n\n# Aggregate the raster using 2 pixels within the horizontal and the vertical directions\nr4 <- aggregate(r16, fact = 2)\n\nr4\n#> class       : SpatRaster \n#> dimensions  : 2, 2, 1  (nrow, ncol, nlyr)\n#> resolution  : 2, 2  (x, y)\n#> extent      : 0, 4, 0, 4  (xmin, xmax, ymin, ymax)\n#> coord. ref. :  \n#> source      : memory \n#> name        : lyr.1 \n#> min value   :   3.5 \n#> max value   :  13.5\n\nplot_raster(r4)\n\n\n\n\n\n\n\nWhat happened is that, by default, the aggregate() function is using the mean() function to summarize the pixel values. Hence, the upper left pixel has a value of 3.5 which correspond to the average of 4 pixels (1 + 5 + 2 + 6) / 4 = 3.5. As mentioned previously, one can use any function that returns a single value such as the min() function.\n\n# Aggregate using the min() function\nplot_raster(aggregate(r16, fun = \"min\"))"
  },
  {
    "objectID": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html#disaggregating-a-raster",
    "href": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html#disaggregating-a-raster",
    "title": "Changing spatial resolution of a raster with terra",
    "section": "Disaggregating a raster",
    "text": "Disaggregating a raster\nIf aggregating is the process of combining pixels, disaggregating is the process of splitting pixels into smaller ones. This operation is done with disagg(). Using the original 4 x 4 r16raster, each pixel will be disaggregated into 16 smaller pixels, once again using the fact argument.\n\nr256 <- disagg(r16, fact = 4)\nr256\n#> class       : SpatRaster \n#> dimensions  : 16, 16, 1  (nrow, ncol, nlyr)\n#> resolution  : 0.25, 0.25  (x, y)\n#> extent      : 0, 4, 0, 4  (xmin, xmax, ymin, ymax)\n#> coord. ref. :  \n#> source      : memory \n#> name        : lyr.1 \n#> min value   :     1 \n#> max value   :    16\n\nHere, each pixel of the original r16 raster is divided into 16 smaller pixels (4 x 4), giving a total of 256 pixels (16 x 16).\n\nplot_raster(r256)"
  },
  {
    "objectID": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html#resampling",
    "href": "posts/2022-04-28-changing-spatial-resolution-of-a-raster-with-terra/index.html#resampling",
    "title": "Changing spatial resolution of a raster with terra",
    "section": "Resampling",
    "text": "Resampling\nResampling is the process of transferring the values from a raster into another raster that does not have the same geometry (i.e. cell size). This is often the case when working with remote-sensing products that are derived from sources with different spatial resolutions. For the following examples, I will use data from Sentinel-2 (10 meters resolution) and Landsat-8 (30 meters resolution). Both scenes are from the same area and https://www.gisagmaps.com/l8-s2-comparison-and-download/. Raster files can be downloaded on https://www.gisagmaps.com/l8-s2-comparison-and-download/L8_S2_080415_Comparison.zip. Images contain the top of atmosphere (TOA) reflectance and we will use the RGB bands.\n\ns2 <- rast(fs::dir_ls(\"data/L8_S2_080415_Comparison/S2_080415_TOA\"))\ns2\n#> class       : SpatRaster \n#> dimensions  : 451, 451, 3  (nrow, ncol, nlyr)\n#> resolution  : 10, 10  (x, y)\n#> extent      : 282040, 286550, 4564930, 4569440  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> sources     : S2_B2_10m_080415_TOA.tif  \n#>               S2_B3_10m_080415_TOA.tif  \n#>               S2_B4_10m_080415_TOA.tif  \n#> names       : S2_B2_10m_080415_TOA, S2_B3_10m_080415_TOA, S2_B4_10m_080415_TOA\n\nl8 <- rast(fs::dir_ls(\"data/L8_S2_080415_Comparison/L8_080415_TOA\"))\nl8\n#> class       : SpatRaster \n#> dimensions  : 150, 150, 3  (nrow, ncol, nlyr)\n#> resolution  : 30, 30  (x, y)\n#> extent      : 282045, 286545, 4564935, 4569435  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> sources     : L8_B2_080415_TOA.tif  \n#>               L8_B3_080415_TOA.tif  \n#>               L8_B4_080415_TOA.tif  \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA\n\nWe can easily see the difference in spatial resolution between the two images.\n\npar(mar = c(1, 1, 3, 1), oma = c(1, 1, 3, 1))\nplotRGB(s2, 3, 2, 1, stretch = \"lin\")\nmtext(\"Sentinel-2 (10 meters)\", side = 3)\n\npar(mar = c(1, 1, 3, 1), oma = c(1, 1, 3, 1))\nplotRGB(l8, 3, 2, 1, stretch = \"lin\")\nmtext(\"Landsat-8 (30 meters)\", side = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBecause the two rasters (s2 and l8) do not have the same geometry, algebra operations can not be performed.\n\nl8 - s2\n#> Error: [-] extents do not match\n\nGiven that the pixel resolution of the Landsat-8 image is exactly a factor of 3 compared to Sentinel-2, one can be tempted to use disagg() to get the 10 m pixel resolution from the Landsat-8 so it matches the resolution of the Sentinel-2 image.\n\nl8_10m <- disagg(l8, fact = 3)\nl8_10m\n#> class       : SpatRaster \n#> dimensions  : 450, 450, 3  (nrow, ncol, nlyr)\n#> resolution  : 10, 10  (x, y)\n#> extent      : 282045, 286545, 4564935, 4569435  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> source      : memory \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA \n#> min values  :       0.07772131,       0.05887134,       0.03377673 \n#> max values  :        0.2687978,        0.3173852,        0.3191263\n\nres(s2)\n#> [1] 10 10\n\nres(l8_10m)\n#> [1] 10 10\n\nHowever, this is still not working because the two rasters do not have the exact extent.\n\nl8_10m - s2\n#> Error: [-] extents do not match\n\nThe solution is to use resample() to transfer the values of l8 into the same geometry of s2.\n\nl8_resampled <- resample(l8, s2)\n\nl8_resampled\n#> class       : SpatRaster \n#> dimensions  : 451, 451, 3  (nrow, ncol, nlyr)\n#> resolution  : 10, 10  (x, y)\n#> extent      : 282040, 286550, 4564930, 4569440  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> source      : memory \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA \n#> min values  :       0.07844353,       0.06003592,       0.03450089 \n#> max values  :        0.2486627,        0.2781480,        0.2809660\n\npar(mar = c(1, 1, 3, 1), oma = c(1, 1, 3, 1))\nplotRGB(l8_resampled, 3, 2, 1, stretch = \"lin\")\nmtext(\"Landsat-8 (resampled to 10 meters)\", side = 3)\n\n\n\n\n\n\n\nNow, we can perform raster operations.\n\nl8_resampled - s2\n#> class       : SpatRaster \n#> dimensions  : 451, 451, 3  (nrow, ncol, nlyr)\n#> resolution  : 10, 10  (x, y)\n#> extent      : 282040, 286550, 4564930, 4569440  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> source      : memory \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA \n#> min values  :       -0.2693594,       -0.2698378,       -0.2766064 \n#> max values  :        0.1274634,        0.1734840,        0.1898374\n\nUPDATE: 2022-07-30\nMichael Sumner on Twitter pointed out that the same resampling operation could be done using project().\n\n\nproject(l8, s2, method = \"\") uses the warper, resample() is a subsetbilinear is default method, gdal calls it -r resample, default there is \"near\"\n\n— Michael Sumner (@mdsumner) May 24, 2022\n\nLet’s try resampling l8 onto the same grid as s2.\n\nl8_resampled_project <- project(l8, s2)\n\nl8_resampled_project\n#> class       : SpatRaster \n#> dimensions  : 451, 451, 3  (nrow, ncol, nlyr)\n#> resolution  : 10, 10  (x, y)\n#> extent      : 282040, 286550, 4564930, 4569440  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> source      : memory \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA \n#> min values  :       0.07844353,       0.06003592,       0.03450089 \n#> max values  :        0.2486627,        0.2781480,        0.2809660\nl8_resampled\n#> class       : SpatRaster \n#> dimensions  : 451, 451, 3  (nrow, ncol, nlyr)\n#> resolution  : 10, 10  (x, y)\n#> extent      : 282040, 286550, 4564930, 4569440  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> source      : memory \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA \n#> min values  :       0.07844353,       0.06003592,       0.03450089 \n#> max values  :        0.2486627,        0.2781480,        0.2809660\n\nIndeed, this is working perfectly fine and we can see that l8_resampled_project is now on the same 10 m by 10 m grid as s2.\nWhereas this is working fine, I thought it was worth mentioning that if you only want to reproject a raster and not change the dimensions of the grid, one should use the destination CRS rather than the raster itself. Here both l8 and s2 have the same CRS and hence only reprojecting (i.e. without resampling) will not change the coordinate system.\n\nidentical(crs(l8), crs(s2))\n#> [1] TRUE\n\nHowever, let’s do it for demonstration purposes.\n\nproject(l8, crs(s2))\n#> class       : SpatRaster \n#> dimensions  : 150, 150, 3  (nrow, ncol, nlyr)\n#> resolution  : 30, 30  (x, y)\n#> extent      : 282045, 286545, 4564935, 4569435  (xmin, xmax, ymin, ymax)\n#> coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n#> source      : memory \n#> names       : L8_B2_080415_TOA, L8_B3_080415_TOA, L8_B4_080415_TOA \n#> min values  :       0.07772131,       0.05887134,       0.03377673 \n#> max values  :        0.2687978,        0.3173852,        0.3191263\n\nAs we can see, using project(l8, crs(s2)) instead of project(l8, s2) will not change the pixel resolution of the reprojected raster. The reprojected l8 raster still has a pixel resolution of 30 m by 30 m.\n\nSession info\n\n#> ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.1 (2022-06-23)\n#>  os       Ubuntu 22.04 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Toronto\n#>  date     2022-07-30\n#>  pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  package     * version date (UTC) lib source\n#>  cachem        1.0.6   2021-08-19 [1] RSPM (R 4.2.0)\n#>  callr         3.7.1   2022-07-13 [1] RSPM (R 4.2.0)\n#>  cli           3.3.0   2022-04-25 [1] RSPM (R 4.2.0)\n#>  codetools     0.2-18  2020-11-04 [2] CRAN (R 4.2.1)\n#>  crayon        1.5.1   2022-03-26 [1] RSPM (R 4.2.0)\n#>  devtools      2.4.4   2022-07-20 [1] RSPM (R 4.2.0)\n#>  digest        0.6.29  2021-12-01 [1] RSPM (R 4.2.0)\n#>  ellipsis      0.3.2   2021-04-29 [1] RSPM (R 4.2.0)\n#>  evaluate      0.15    2022-02-18 [1] RSPM (R 4.2.0)\n#>  fastmap       1.1.0   2021-01-25 [1] RSPM (R 4.2.0)\n#>  fs            1.5.2   2021-12-08 [1] RSPM (R 4.2.0)\n#>  glue          1.6.2   2022-02-24 [1] RSPM (R 4.2.0)\n#>  htmltools     0.5.3   2022-07-18 [1] RSPM (R 4.2.0)\n#>  htmlwidgets   1.5.4   2021-09-08 [1] RSPM (R 4.2.0)\n#>  httpuv        1.6.5   2022-01-05 [1] RSPM (R 4.2.0)\n#>  jsonlite      1.8.0   2022-02-22 [1] RSPM (R 4.2.0)\n#>  knitr         1.39    2022-04-26 [1] RSPM (R 4.2.0)\n#>  later         1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#>  lifecycle     1.0.1   2021-09-24 [1] RSPM (R 4.2.0)\n#>  magrittr      2.0.3   2022-03-30 [1] RSPM (R 4.2.0)\n#>  memoise       2.0.1   2021-11-26 [1] RSPM (R 4.2.0)\n#>  mime          0.12    2021-09-28 [1] RSPM (R 4.2.0)\n#>  miniUI        0.1.1.1 2018-05-18 [1] RSPM (R 4.2.0)\n#>  pkgbuild      1.3.1   2021-12-20 [1] RSPM (R 4.2.0)\n#>  pkgload       1.3.0   2022-06-27 [1] RSPM (R 4.2.0)\n#>  prettyunits   1.1.1   2020-01-24 [1] RSPM (R 4.2.0)\n#>  processx      3.7.0   2022-07-07 [1] RSPM (R 4.2.0)\n#>  profvis       0.3.7   2020-11-02 [1] RSPM (R 4.2.0)\n#>  promises      1.2.0.1 2021-02-11 [1] RSPM (R 4.2.0)\n#>  ps            1.7.1   2022-06-18 [1] RSPM (R 4.2.0)\n#>  purrr         0.3.4   2020-04-17 [1] RSPM (R 4.2.0)\n#>  R6            2.5.1   2021-08-19 [1] RSPM (R 4.2.0)\n#>  Rcpp          1.0.9   2022-07-08 [1] RSPM (R 4.2.0)\n#>  remotes       2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#>  rlang         1.0.4   2022-07-12 [1] RSPM (R 4.2.0)\n#>  rmarkdown     2.14    2022-04-25 [1] RSPM (R 4.2.0)\n#>  rspm          0.1.0.3 2022-07-27 [1] Github (Enchufa2/rspm@ba091ae)\n#>  rstudioapi    0.13    2020-11-12 [1] RSPM (R 4.2.0)\n#>  sessioninfo   1.2.2   2021-12-06 [1] RSPM (R 4.2.0)\n#>  shiny         1.7.2   2022-07-19 [1] RSPM (R 4.2.0)\n#>  stringi       1.7.8   2022-07-11 [1] RSPM (R 4.2.0)\n#>  stringr       1.4.0   2019-02-10 [1] RSPM (R 4.2.0)\n#>  terra       * 1.6-3   2022-07-25 [1] RSPM (R 4.2.0)\n#>  urlchecker    1.0.1   2021-11-30 [1] RSPM (R 4.2.0)\n#>  usethis       2.1.6   2022-05-25 [1] CRAN (R 4.2.1)\n#>  xfun          0.31    2022-05-10 [1] RSPM (R 4.2.0)\n#>  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#>  yaml          2.3.5   2022-02-21 [1] RSPM (R 4.2.0)\n#> \n#>  [1] /home/filoche/R/x86_64-pc-linux-gnu-library/4.2\n#>  [2] /opt/R/4.2.1/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2021-11-12-choosing-the-right-projection/index.html",
    "href": "posts/2021-11-12-choosing-the-right-projection/index.html",
    "title": "Choosing the right geographic projection with the crsuggest R package",
    "section": "",
    "text": "A medieval depiction of the Ecumene (1482, Johannes Schnitzer, engraver), constructed after the coordinates in Ptolemy’s Geography and using his second map projection\n\n\nImage from: https://en.wikipedia.org/wiki/Map_projection\nThe goal of this blog post is not to go into details and consideration on how to choose a good projection (it is out of my expertise), but rather present a quick overview of the crsuggest R package that can help to find a projection suited for the data to be displayed.\n\nlibrary(rnaturalearth)\nlibrary(sf)\nlibrary(patchwork)\n\nlibrary(crsuggest)\n\n\n# Download the Greenland shapefile\nmap <- ne_countries(country = \"greenland\", returnclass = \"sf\", scale = \"medium\")\n\n# Looks at the projection\nst_crs(map)$proj4string\n#> [1] \"+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs\"\n\nWe can see that WGS84 is used as the reference coordinate system. Plotting the shapefile immediately shows that the result is somewhat distorted.\n\np1 <- ggplot() +\n  geom_sf(data = map)\n\np1\n\n\n\n\n\n\n\nTime to look at the crsuggest package. The function suggest_crs() takes a spatial dataset as inputs (here the map object) and return a list (n = 10 by default) of suggested coordinate systems in a tibble.\n\nsuggested_crs <- suggest_crs(map, limit = 3)\nsuggested_crs\n#> # A tibble: 3 × 6\n#>   crs_code crs_name                              crs_t…¹ crs_gcs crs_u…² crs_p…³\n#>   <chr>    <chr>                                 <chr>     <dbl> <chr>   <chr>  \n#> 1 5922     WGS 84 / EPSG Arctic Regional zone A2 projec…    4326 m       +proj=…\n#> 2 6054     GR96 / EPSG Arctic zone 3-31          projec…    4747 m       +proj=…\n#> 3 6051     GR96 / EPSG Arctic zone 2-18          projec…    4747 m       +proj=…\n#> # … with abbreviated variable names ¹​crs_type, ²​crs_units, ³​crs_proj4\n\nLet’s make some plots using the suggested CRS.\n\nplot_map <- function(crs, map) {\n  ggplot() +\n    geom_sf(data = map) +\n    coord_sf(crs = as.numeric(crs)) +\n    labs(\n      title = paste(\"CRS:\", crs)\n    )\n}\n\nmaps <- lapply(suggested_crs$crs_code, plot_map, map = map)\n\nWe can see that the projected maps look more accurate than the original map.\n\nwrap_plots(maps, ncol = 3)\n\n\n\n\n\n\n\nThis is even more obvious when they are compared side by side.\n\np2 <- ggplot() +\n  geom_sf(data = map) +\n  coord_sf(crs = 5922)\n\np1 + p2\n\n\n\n\n\n\n\n\nSession info\n\n#> ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.1 (2022-06-23)\n#>  os       Ubuntu 22.04 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Toronto\n#>  date     2022-07-30\n#>  pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  package           * version date (UTC) lib source\n#>  assertthat          0.2.1   2019-03-21 [1] RSPM (R 4.2.0)\n#>  backports           1.4.1   2021-12-13 [1] RSPM (R 4.2.0)\n#>  base64enc           0.1-3   2015-07-28 [1] RSPM (R 4.2.0)\n#>  broom               1.0.0   2022-07-01 [1] RSPM (R 4.2.0)\n#>  cachem              1.0.6   2021-08-19 [1] RSPM (R 4.2.0)\n#>  callr               3.7.1   2022-07-13 [1] RSPM (R 4.2.0)\n#>  cellranger          1.1.0   2016-07-27 [1] RSPM (R 4.2.0)\n#>  class               7.3-20  2022-01-16 [2] CRAN (R 4.2.1)\n#>  classInt            0.4-7   2022-06-10 [1] CRAN (R 4.2.1)\n#>  cli                 3.3.0   2022-04-25 [1] RSPM (R 4.2.0)\n#>  codetools           0.2-18  2020-11-04 [2] CRAN (R 4.2.1)\n#>  colorspace          2.0-3   2022-02-21 [1] RSPM (R 4.2.0)\n#>  crayon              1.5.1   2022-03-26 [1] RSPM (R 4.2.0)\n#>  crosstalk           1.2.0   2021-11-04 [1] RSPM (R 4.2.0)\n#>  crsuggest         * 0.4     2022-07-06 [1] RSPM (R 4.2.0)\n#>  DBI                 1.1.3   2022-06-18 [1] RSPM (R 4.2.0)\n#>  dbplyr              2.2.1   2022-06-27 [1] RSPM (R 4.2.0)\n#>  devtools            2.4.4   2022-07-20 [1] RSPM (R 4.2.0)\n#>  digest              0.6.29  2021-12-01 [1] RSPM (R 4.2.0)\n#>  dplyr             * 1.0.9   2022-04-28 [1] RSPM (R 4.2.0)\n#>  e1071               1.7-11  2022-06-07 [1] CRAN (R 4.2.1)\n#>  ellipsis            0.3.2   2021-04-29 [1] RSPM (R 4.2.0)\n#>  evaluate            0.15    2022-02-18 [1] RSPM (R 4.2.0)\n#>  extrafont           0.18    2022-04-12 [1] RSPM (R 4.2.0)\n#>  extrafontdb         1.0     2012-06-11 [1] RSPM (R 4.2.0)\n#>  fansi               1.0.3   2022-03-24 [1] RSPM (R 4.2.0)\n#>  farver              2.1.1   2022-07-06 [1] RSPM (R 4.2.0)\n#>  fastmap             1.1.0   2021-01-25 [1] RSPM (R 4.2.0)\n#>  forcats           * 0.5.1   2021-01-27 [1] RSPM (R 4.2.0)\n#>  fs                  1.5.2   2021-12-08 [1] RSPM (R 4.2.0)\n#>  gargle              1.2.0   2021-07-02 [1] RSPM (R 4.2.0)\n#>  generics            0.1.3   2022-07-05 [1] RSPM (R 4.2.0)\n#>  ggplot2           * 3.3.6   2022-05-03 [1] RSPM (R 4.2.0)\n#>  ggpmthemes        * 0.0.2   2022-07-29 [1] Github (pmassicotte/ggpmthemes@993d61e)\n#>  glue                1.6.2   2022-02-24 [1] RSPM (R 4.2.0)\n#>  googledrive         2.0.0   2021-07-08 [1] RSPM (R 4.2.0)\n#>  googlesheets4       1.0.0   2021-07-21 [1] RSPM (R 4.2.0)\n#>  gtable              0.3.0   2019-03-25 [1] RSPM (R 4.2.0)\n#>  haven               2.5.0   2022-04-15 [1] RSPM (R 4.2.0)\n#>  hms                 1.1.1   2021-09-26 [1] RSPM (R 4.2.0)\n#>  htmltools           0.5.3   2022-07-18 [1] RSPM (R 4.2.0)\n#>  htmlwidgets         1.5.4   2021-09-08 [1] RSPM (R 4.2.0)\n#>  httpuv              1.6.5   2022-01-05 [1] RSPM (R 4.2.0)\n#>  httr                1.4.3   2022-05-04 [1] RSPM (R 4.2.0)\n#>  jsonlite            1.8.0   2022-02-22 [1] RSPM (R 4.2.0)\n#>  KernSmooth          2.23-20 2021-05-03 [2] CRAN (R 4.2.1)\n#>  knitr               1.39    2022-04-26 [1] RSPM (R 4.2.0)\n#>  later               1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#>  lattice             0.20-45 2021-09-22 [2] CRAN (R 4.2.1)\n#>  leafem              0.2.0   2022-04-16 [1] RSPM (R 4.2.0)\n#>  leaflet             2.1.1   2022-03-23 [1] RSPM (R 4.2.0)\n#>  lifecycle           1.0.1   2021-09-24 [1] RSPM (R 4.2.0)\n#>  lubridate           1.8.0   2021-10-07 [1] RSPM (R 4.2.0)\n#>  magrittr            2.0.3   2022-03-30 [1] RSPM (R 4.2.0)\n#>  mapview             2.11.0  2022-04-16 [1] RSPM (R 4.2.0)\n#>  memoise             2.0.1   2021-11-26 [1] RSPM (R 4.2.0)\n#>  mime                0.12    2021-09-28 [1] RSPM (R 4.2.0)\n#>  miniUI              0.1.1.1 2018-05-18 [1] RSPM (R 4.2.0)\n#>  modelr              0.1.8   2020-05-19 [1] RSPM (R 4.2.0)\n#>  munsell             0.5.0   2018-06-12 [1] RSPM (R 4.2.0)\n#>  patchwork         * 1.1.1   2020-12-17 [1] RSPM (R 4.2.0)\n#>  pillar              1.8.0   2022-07-18 [1] RSPM (R 4.2.0)\n#>  pkgbuild            1.3.1   2021-12-20 [1] RSPM (R 4.2.0)\n#>  pkgconfig           2.0.3   2019-09-22 [1] RSPM (R 4.2.0)\n#>  pkgload             1.3.0   2022-06-27 [1] RSPM (R 4.2.0)\n#>  png                 0.1-7   2013-12-03 [1] RSPM (R 4.2.0)\n#>  prettyunits         1.1.1   2020-01-24 [1] RSPM (R 4.2.0)\n#>  processx            3.7.0   2022-07-07 [1] RSPM (R 4.2.0)\n#>  profvis             0.3.7   2020-11-02 [1] RSPM (R 4.2.0)\n#>  promises            1.2.0.1 2021-02-11 [1] RSPM (R 4.2.0)\n#>  proxy               0.4-27  2022-06-09 [1] CRAN (R 4.2.1)\n#>  ps                  1.7.1   2022-06-18 [1] RSPM (R 4.2.0)\n#>  purrr             * 0.3.4   2020-04-17 [1] RSPM (R 4.2.0)\n#>  R6                  2.5.1   2021-08-19 [1] RSPM (R 4.2.0)\n#>  raster              3.5-21  2022-06-27 [1] RSPM (R 4.2.0)\n#>  Rcpp                1.0.9   2022-07-08 [1] RSPM (R 4.2.0)\n#>  readr             * 2.1.2   2022-01-30 [1] RSPM (R 4.2.0)\n#>  readxl              1.4.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  remotes             2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#>  reprex              2.0.1   2021-08-05 [1] RSPM (R 4.2.0)\n#>  rlang               1.0.4   2022-07-12 [1] RSPM (R 4.2.0)\n#>  rmarkdown           2.14    2022-04-25 [1] RSPM (R 4.2.0)\n#>  rnaturalearth     * 0.1.0   2017-03-21 [1] RSPM (R 4.2.0)\n#>  rnaturalearthdata   0.1.0   2017-02-21 [1] RSPM (R 4.2.0)\n#>  rspm                0.1.0.3 2022-07-27 [1] Github (Enchufa2/rspm@ba091ae)\n#>  rstudioapi          0.13    2020-11-12 [1] RSPM (R 4.2.0)\n#>  Rttf2pt1            1.3.10  2022-02-07 [1] RSPM (R 4.2.0)\n#>  rvest               1.0.2   2021-10-16 [1] RSPM (R 4.2.0)\n#>  s2                  1.1.0   2022-07-18 [1] CRAN (R 4.2.1)\n#>  satellite           1.0.4   2021-10-12 [1] RSPM (R 4.2.0)\n#>  scales              1.2.0   2022-04-13 [1] RSPM (R 4.2.0)\n#>  sessioninfo         1.2.2   2021-12-06 [1] RSPM (R 4.2.0)\n#>  sf                * 1.0-8   2022-07-14 [1] RSPM (R 4.2.0)\n#>  shiny               1.7.2   2022-07-19 [1] RSPM (R 4.2.0)\n#>  sp                  1.5-0   2022-06-05 [1] RSPM (R 4.2.0)\n#>  stringi             1.7.8   2022-07-11 [1] RSPM (R 4.2.0)\n#>  stringr           * 1.4.0   2019-02-10 [1] RSPM (R 4.2.0)\n#>  terra               1.6-3   2022-07-25 [1] RSPM (R 4.2.0)\n#>  tibble            * 3.1.8   2022-07-22 [1] RSPM (R 4.2.0)\n#>  tidyr             * 1.2.0   2022-02-01 [1] RSPM (R 4.2.0)\n#>  tidyselect          1.1.2   2022-02-21 [1] RSPM (R 4.2.0)\n#>  tidyverse         * 1.3.2   2022-07-18 [1] RSPM (R 4.2.0)\n#>  tzdb                0.3.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  units               0.8-0   2022-02-05 [1] RSPM (R 4.2.0)\n#>  urlchecker          1.0.1   2021-11-30 [1] RSPM (R 4.2.0)\n#>  usethis             2.1.6   2022-05-25 [1] CRAN (R 4.2.1)\n#>  utf8                1.2.2   2021-07-24 [1] RSPM (R 4.2.0)\n#>  vctrs               0.4.1   2022-04-13 [1] RSPM (R 4.2.0)\n#>  webshot             0.5.3   2022-04-14 [1] CRAN (R 4.2.1)\n#>  withr               2.5.0   2022-03-03 [1] RSPM (R 4.2.0)\n#>  wk                  0.6.0   2022-01-03 [1] CRAN (R 4.2.1)\n#>  xfun                0.31    2022-05-10 [1] RSPM (R 4.2.0)\n#>  xml2                1.3.3   2021-11-30 [1] RSPM (R 4.2.0)\n#>  xtable              1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#>  yaml                2.3.5   2022-02-21 [1] RSPM (R 4.2.0)\n#> \n#>  [1] /home/filoche/R/x86_64-pc-linux-gnu-library/4.2\n#>  [2] /opt/R/4.2.1/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2022-02-15-reading-multiples-csv-files-in-r/index.html",
    "href": "posts/2022-02-15-reading-multiples-csv-files-in-r/index.html",
    "title": "Reading multiples CSV files using readr",
    "section": "",
    "text": "# Read all the data files\ndf1 <- read.csv(\"file1.csv\")\ndf2 <- read.csv(\"file2.csv\")\ndf3 <- read.csv(\"file3.csv\")\ndf4 <- read.csv(\"file4.csv\")\ndf5 <- read.csv(\"file5.csv\")\n\n# Combine all the data frame together\nbig_df <- rbind(df1, df2, df3, df4, df5)\n\nWhereas this can work fine if you have only a few files, this can become tedious when the number of files to read increases. A better approach would be to use a list of files and read them at once. For quite a while, I have been using a combination of map_df() from the purrr package.\n\n# Create a vector of file names\nfiles <- c(\"file1.csv\", \"file2.csv\", \"file3.csv\", \"file4.csv\", \"file5.csv\")\n\n# Read and combine all data files into a single data frame\nbig_df <- map_df(files, read_csv)\n\nIn the release of readr 2.0.0, the read_csv() function can directly take a list of files as input, eliminating the need to use the mad_df() function. Hence, we can now read multiples files as follow:\n\n# Read and combine all data files into a single data frame without using the\n# map_df function\nbig_df <- read_csv(files)\n\n\n\nLights in the night\n\n\nIn this short blog post, I wanted to benchmark the speed difference between map_df(files, read_csv) and read_csv(files). To do it so let’s first generate some data files.\n\nlibrary(nycflights13)\n\npurrr::iwalk(\n  split(flights, flights$carrier),\n  ~ {\n    .x$carrier[[1]]\n    data.table::fwrite(.x, glue::glue(\"/tmp/flights_{.y}.csv\"))\n  }\n)\n\nfiles <- fs::dir_ls(path = \"/tmp\", glob = \"*flights*csv\")\nfiles\n#> /tmp/flights_9E.csv /tmp/flights_AA.csv /tmp/flights_AS.csv /tmp/flights_B6.csv \n#> /tmp/flights_DL.csv /tmp/flights_EV.csv /tmp/flights_F9.csv /tmp/flights_FL.csv \n#> /tmp/flights_HA.csv /tmp/flights_MQ.csv /tmp/flights_OO.csv /tmp/flights_UA.csv \n#> /tmp/flights_US.csv /tmp/flights_VX.csv /tmp/flights_WN.csv /tmp/flights_YV.csv\n\nWe can look at what the data look like.\n\nread_csv(files[[1]])\n#> # A tibble: 18,460 × 19\n#>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n#>    <dbl> <dbl> <dbl>    <dbl>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n#>  1  2013     1     1      810        810       0    1048    1037      11       9\n#>  2  2013     1     1     1451       1500      -9    1634    1636      -2       9\n#>  3  2013     1     1     1452       1455      -3    1637    1639      -2       9\n#>  4  2013     1     1     1454       1500      -6    1635    1636      -1       9\n#>  5  2013     1     1     1507       1515      -8    1651    1656      -5       9\n#>  6  2013     1     1     1530       1530       0    1650    1655      -5       9\n#>  7  2013     1     1     1546       1540       6    1753    1748       5       9\n#>  8  2013     1     1     1550       1550       0    1844    1831      13       9\n#>  9  2013     1     1     1552       1600      -8    1749    1757      -8       9\n#> 10  2013     1     1     1554       1600      -6    1701    1734     -33       9\n#> # … with 18,450 more rows, 9 more variables: flight <dbl>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#> #   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n#> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\nNow that data files have been successfully created, we can compare the two reading options.\n\nres <- microbenchmark::microbenchmark(\n  map_df_read_csv = map_df(files, read_csv, col_types = cols(carrier = col_character())),\n  read_csv = read_csv(files, col_types = cols(carrier = col_character())),\n  times = 100\n)\n\nres\n#> Unit: milliseconds\n#>             expr      min       lq     mean   median       uq      max neval\n#>  map_df_read_csv 413.3536 441.4230 480.7377 497.3756 502.5032 521.7361   100\n#>         read_csv 148.1041 153.3014 163.3054 156.3136 161.2407 251.3683   100\n\nautoplot(res)\n\n\n\n\n\n\n\nUsing read_csv() directly seems to be much (~two times) faster than the map_df(files, read_csv) combination.\n\nSession info\n\n#> ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.1 (2022-06-23)\n#>  os       Ubuntu 22.04 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language en_CA:en\n#>  collate  en_CA.UTF-8\n#>  ctype    en_CA.UTF-8\n#>  tz       America/Toronto\n#>  date     2022-07-30\n#>  pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#>  package        * version date (UTC) lib source\n#>  assertthat       0.2.1   2019-03-21 [1] RSPM (R 4.2.0)\n#>  backports        1.4.1   2021-12-13 [1] RSPM (R 4.2.0)\n#>  bit              4.0.4   2020-08-04 [1] RSPM (R 4.2.0)\n#>  bit64            4.0.5   2020-08-30 [1] RSPM (R 4.2.0)\n#>  broom            1.0.0   2022-07-01 [1] RSPM (R 4.2.0)\n#>  cachem           1.0.6   2021-08-19 [1] RSPM (R 4.2.0)\n#>  callr            3.7.1   2022-07-13 [1] RSPM (R 4.2.0)\n#>  cellranger       1.1.0   2016-07-27 [1] RSPM (R 4.2.0)\n#>  cli              3.3.0   2022-04-25 [1] RSPM (R 4.2.0)\n#>  codetools        0.2-18  2020-11-04 [2] CRAN (R 4.2.1)\n#>  colorspace       2.0-3   2022-02-21 [1] RSPM (R 4.2.0)\n#>  crayon           1.5.1   2022-03-26 [1] RSPM (R 4.2.0)\n#>  data.table       1.14.2  2021-09-27 [1] RSPM (R 4.2.0)\n#>  DBI              1.1.3   2022-06-18 [1] RSPM (R 4.2.0)\n#>  dbplyr           2.2.1   2022-06-27 [1] RSPM (R 4.2.0)\n#>  devtools         2.4.4   2022-07-20 [1] RSPM (R 4.2.0)\n#>  digest           0.6.29  2021-12-01 [1] RSPM (R 4.2.0)\n#>  dplyr          * 1.0.9   2022-04-28 [1] RSPM (R 4.2.0)\n#>  ellipsis         0.3.2   2021-04-29 [1] RSPM (R 4.2.0)\n#>  evaluate         0.15    2022-02-18 [1] RSPM (R 4.2.0)\n#>  extrafont        0.18    2022-04-12 [1] RSPM (R 4.2.0)\n#>  extrafontdb      1.0     2012-06-11 [1] RSPM (R 4.2.0)\n#>  fansi            1.0.3   2022-03-24 [1] RSPM (R 4.2.0)\n#>  farver           2.1.1   2022-07-06 [1] RSPM (R 4.2.0)\n#>  fastmap          1.1.0   2021-01-25 [1] RSPM (R 4.2.0)\n#>  forcats        * 0.5.1   2021-01-27 [1] RSPM (R 4.2.0)\n#>  fs               1.5.2   2021-12-08 [1] RSPM (R 4.2.0)\n#>  gargle           1.2.0   2021-07-02 [1] RSPM (R 4.2.0)\n#>  generics         0.1.3   2022-07-05 [1] RSPM (R 4.2.0)\n#>  ggplot2        * 3.3.6   2022-05-03 [1] RSPM (R 4.2.0)\n#>  ggpmthemes     * 0.0.2   2022-07-29 [1] Github (pmassicotte/ggpmthemes@993d61e)\n#>  glue             1.6.2   2022-02-24 [1] RSPM (R 4.2.0)\n#>  googledrive      2.0.0   2021-07-08 [1] RSPM (R 4.2.0)\n#>  googlesheets4    1.0.0   2021-07-21 [1] RSPM (R 4.2.0)\n#>  gtable           0.3.0   2019-03-25 [1] RSPM (R 4.2.0)\n#>  haven            2.5.0   2022-04-15 [1] RSPM (R 4.2.0)\n#>  hms              1.1.1   2021-09-26 [1] RSPM (R 4.2.0)\n#>  htmltools        0.5.3   2022-07-18 [1] RSPM (R 4.2.0)\n#>  htmlwidgets      1.5.4   2021-09-08 [1] RSPM (R 4.2.0)\n#>  httpuv           1.6.5   2022-01-05 [1] RSPM (R 4.2.0)\n#>  httr             1.4.3   2022-05-04 [1] RSPM (R 4.2.0)\n#>  jsonlite         1.8.0   2022-02-22 [1] RSPM (R 4.2.0)\n#>  knitr            1.39    2022-04-26 [1] RSPM (R 4.2.0)\n#>  later            1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#>  lifecycle        1.0.1   2021-09-24 [1] RSPM (R 4.2.0)\n#>  lubridate        1.8.0   2021-10-07 [1] RSPM (R 4.2.0)\n#>  magrittr         2.0.3   2022-03-30 [1] RSPM (R 4.2.0)\n#>  memoise          2.0.1   2021-11-26 [1] RSPM (R 4.2.0)\n#>  microbenchmark   1.4.9   2021-11-09 [1] CRAN (R 4.2.1)\n#>  mime             0.12    2021-09-28 [1] RSPM (R 4.2.0)\n#>  miniUI           0.1.1.1 2018-05-18 [1] RSPM (R 4.2.0)\n#>  modelr           0.1.8   2020-05-19 [1] RSPM (R 4.2.0)\n#>  munsell          0.5.0   2018-06-12 [1] RSPM (R 4.2.0)\n#>  nycflights13   * 1.0.2   2021-04-12 [1] CRAN (R 4.2.1)\n#>  pillar           1.8.0   2022-07-18 [1] RSPM (R 4.2.0)\n#>  pkgbuild         1.3.1   2021-12-20 [1] RSPM (R 4.2.0)\n#>  pkgconfig        2.0.3   2019-09-22 [1] RSPM (R 4.2.0)\n#>  pkgload          1.3.0   2022-06-27 [1] RSPM (R 4.2.0)\n#>  prettyunits      1.1.1   2020-01-24 [1] RSPM (R 4.2.0)\n#>  processx         3.7.0   2022-07-07 [1] RSPM (R 4.2.0)\n#>  profvis          0.3.7   2020-11-02 [1] RSPM (R 4.2.0)\n#>  promises         1.2.0.1 2021-02-11 [1] RSPM (R 4.2.0)\n#>  ps               1.7.1   2022-06-18 [1] RSPM (R 4.2.0)\n#>  purrr          * 0.3.4   2020-04-17 [1] RSPM (R 4.2.0)\n#>  R6               2.5.1   2021-08-19 [1] RSPM (R 4.2.0)\n#>  Rcpp             1.0.9   2022-07-08 [1] RSPM (R 4.2.0)\n#>  readr          * 2.1.2   2022-01-30 [1] RSPM (R 4.2.0)\n#>  readxl           1.4.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  remotes          2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#>  reprex           2.0.1   2021-08-05 [1] RSPM (R 4.2.0)\n#>  rlang            1.0.4   2022-07-12 [1] RSPM (R 4.2.0)\n#>  rmarkdown        2.14    2022-04-25 [1] RSPM (R 4.2.0)\n#>  rspm             0.1.0.3 2022-07-27 [1] Github (Enchufa2/rspm@ba091ae)\n#>  rstudioapi       0.13    2020-11-12 [1] RSPM (R 4.2.0)\n#>  Rttf2pt1         1.3.10  2022-02-07 [1] RSPM (R 4.2.0)\n#>  rvest            1.0.2   2021-10-16 [1] RSPM (R 4.2.0)\n#>  scales           1.2.0   2022-04-13 [1] RSPM (R 4.2.0)\n#>  sessioninfo      1.2.2   2021-12-06 [1] RSPM (R 4.2.0)\n#>  shiny            1.7.2   2022-07-19 [1] RSPM (R 4.2.0)\n#>  stringi          1.7.8   2022-07-11 [1] RSPM (R 4.2.0)\n#>  stringr        * 1.4.0   2019-02-10 [1] RSPM (R 4.2.0)\n#>  tibble         * 3.1.8   2022-07-22 [1] RSPM (R 4.2.0)\n#>  tidyr          * 1.2.0   2022-02-01 [1] RSPM (R 4.2.0)\n#>  tidyselect       1.1.2   2022-02-21 [1] RSPM (R 4.2.0)\n#>  tidyverse      * 1.3.2   2022-07-18 [1] RSPM (R 4.2.0)\n#>  tzdb             0.3.0   2022-03-28 [1] RSPM (R 4.2.0)\n#>  urlchecker       1.0.1   2021-11-30 [1] RSPM (R 4.2.0)\n#>  usethis          2.1.6   2022-05-25 [1] CRAN (R 4.2.1)\n#>  utf8             1.2.2   2021-07-24 [1] RSPM (R 4.2.0)\n#>  vctrs            0.4.1   2022-04-13 [1] RSPM (R 4.2.0)\n#>  vroom            1.5.7   2021-11-30 [1] RSPM (R 4.2.0)\n#>  withr            2.5.0   2022-03-03 [1] RSPM (R 4.2.0)\n#>  xfun             0.31    2022-05-10 [1] RSPM (R 4.2.0)\n#>  xml2             1.3.3   2021-11-30 [1] RSPM (R 4.2.0)\n#>  xtable           1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#>  yaml             2.3.5   2022-02-21 [1] RSPM (R 4.2.0)\n#> \n#>  [1] /home/filoche/R/x86_64-pc-linux-gnu-library/4.2\n#>  [2] /opt/R/4.2.1/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html",
    "href": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html",
    "title": "Extracting raster values using the stars R package",
    "section": "",
    "text": "For a long time, I have been using the raster package to manipulate raster data in R. Slowly, I am trying to work my way out with the new stars package. In this post, I am exploring different ways to extract values from a raster at different geographic locations. For this exercise, I am using a Landsat 7 image that is provided within the stars package. Each pixel has a resolution of 30 meters.\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(stars)\nlibrary(ggpmthemes)\n\ntheme_set(theme_maven())\n\n\n# Create a palette for later\npal <- as.character(paletteer::paletteer_d(\"RColorBrewer::Pastel2\"))\n\n# Open the tif and extract the 1 band\ntif <- system.file(\"tif/L7_ETMs.tif\", package = \"stars\")\nr <- read_stars(tif)[, , , 1]\n\n# What are the dimensions?\nst_dimensions(r)\n#>      from  to  offset delta                     refsys point values x/y\n#> x       1 349  288776  28.5 SIRGAS 2000 / UTM zone 25S FALSE   NULL [x]\n#> y       1 352 9120761 -28.5 SIRGAS 2000 / UTM zone 25S FALSE   NULL [y]\n#> band    1   1      NA    NA                         NA    NA   NULL\n\nThis is what the original image looks like.\n\nplot(r, key.pos = NULL)\n\n\n\n\n\n\n\nTo better visualize the process of subsetting raster values, let’s crop the image so we can see the pixels.\n\nst_bbox(r)\n#>      xmin      ymin      xmax      ymax \n#>  288776.3 9110728.8  298722.8 9120760.8\n\nr <- r %>%\n  st_crop(st_bbox(c(\n    xmin = 294000,\n    xmax = 294500,\n    ymin = 9110800,\n    ymax = 9111200\n  ), crs = st_crs(r)))\n\nplot(r, reset = FALSE, key.pos = NULL)\n\n\n\n\n\n\n\nWe can also display the value of each pixel by using text_values = TRUE. This is also where I am using the pal colour vector I created earlier.\n\nplot(r, text_values = TRUE, col = pal, key.pos = NULL)"
  },
  {
    "objectID": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html#sampling-random-locations",
    "href": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html#sampling-random-locations",
    "title": "Extracting raster values using the stars R package",
    "section": "Sampling random locations",
    "text": "Sampling random locations\nUsing this new raster, let’s randomly sample four points.\n\nset.seed(123456)\n\n# Random sampling of 4 points\npts <- st_sample(st_as_sfc(st_bbox(r)), 4)\n\n# Visualize them\nplot(r, text_values = TRUE, col = pal, key.pos = NULL, reset = FALSE)\nplot(\n  pts,\n  add = TRUE,\n  pch = 21,\n  cex = 2,\n  bg = alpha(\"red\", 0.5),\n  col = alpha(\"red\", 0.5)\n)"
  },
  {
    "objectID": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html#extracting-raster-values-using-the-sampled-points",
    "href": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html#extracting-raster-values-using-the-sampled-points",
    "title": "Extracting raster values using the stars R package",
    "section": "Extracting raster values using the sampled points",
    "text": "Extracting raster values using the sampled points\nExtracting raster values at point locations can be done using the st_extract() function. As expected, four values have been extracted.\n\npts_values <- st_extract(r, pts)\npts_values\n#> Simple feature collection with 4 features and 1 field\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 294167 ymin: 9110827 xmax: 294401 ymax: 9111014\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#>   L7_ETMs.tif                 geometry\n#> 1          71   POINT (294401 9110940)\n#> 2          70 POINT (294378.3 9110871)\n#> 3          72 POINT (294192.5 9111014)\n#> 4          68   POINT (294167 9110827)"
  },
  {
    "objectID": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html#extracting-raster-values-using-buffers-around-the-sampled-points",
    "href": "posts/2021-03-06-extracting-raster-values-using-polygons/index.html#extracting-raster-values-using-buffers-around-the-sampled-points",
    "title": "Extracting raster values using the stars R package",
    "section": "Extracting raster values using buffers around the sampled points",
    "text": "Extracting raster values using buffers around the sampled points\nI found that extracting raster values using polygons was a bit more tedious (at least at this stage of my understanding of the stars package).\nGenerate buffers\nLet’s generate buffers of 30 meters around each of the four sampled pixels.\n\npoly <- st_buffer(pts, dist = 30)\n\nclass(poly)\n#> [1] \"sfc_POLYGON\" \"sfc\"\n\nplot(r, text_values = TRUE, col = pal, key.pos = NULL, reset = FALSE)\nplot(st_sfc(poly), add = TRUE, border = \"red\", lwd = 2, col = NA)\nplot(\n  pts,\n  add = TRUE,\n  pch = 21,\n  cex = 2,\n  bg = alpha(\"red\", 0.5),\n  col = alpha(\"red\", 0.5)\n)\n\n\n\n\n\n\n\nWe can visualize which pixels fall within each buffer. Looking at the next figure, one can ask why there are not always the same number of pixels in each buffer. The reason is that the arc of the circle must pass through the center of each pixel to be included in the buffer.\n\nr[poly] %>% \n  st_as_sf() %>% \n  ggplot() +\n  geom_sf(aes(fill = factor(V1)), color = \"#3c3c3c\") +\n  geom_sf(data = st_sfc(poly), fill = NA, color = \"blue\") +\n  geom_sf(data = pts, color = \"red\", size = 2) +\n  geom_sf_text(aes(label = V1)) +\n  paletteer::scale_fill_paletteer_d(\"RColorBrewer::Pastel2\") +\n  theme(\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\nExtracting pixel values covered by the polygons\nNow that we have defined four buffers with a 30 meters radius, we could be tempted to re-use st_extract().\n\nst_extract(r, poly)\n#> stars object with 2 dimensions and 1 attribute\n#> attribute(s):\n#>                  Min.  1st Qu. Median     Mean 3rd Qu. Max.\n#> L7_ETMs.tif  68.33333 69.83333     71 70.95833  72.125 73.5\n#> dimension(s):\n#>          from to offset delta                     refsys point\n#> geometry    1  4     NA    NA SIRGAS 2000 / UTM zone 25S FALSE\n#> band        1  1     NA    NA                         NA    NA\n#>                                                                     values\n#> geometry POLYGON ((294431 9110940, 2...,...,POLYGON ((294197 9110827, 2...\n#> band                                                                  NULL\n\nSurprisingly, we can not use st_extract() with polygons. One option is to use aggregate(). In our example, between three and four pixels are falling under each buffer. This is why we have to tell the aggregate() function how to summarize the values within each buffer with the FUN parameter.\n\n# Extract the average value per polygon\nx <- aggregate(r, poly, FUN = mean)\nst_as_sf(x)\n#> Simple feature collection with 4 features and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 294137 ymin: 9110797 xmax: 294431 ymax: 9111044\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#>         V1                       geometry\n#> 1 68.33333 POLYGON ((294431 9110940, 2...\n#> 2 70.33333 POLYGON ((294408.3 9110871,...\n#> 3 73.50000 POLYGON ((294222.5 9111014,...\n#> 4 71.66667 POLYGON ((294197 9110827, 2...\n\n# Extract the minimum value per polygon\nx <- aggregate(r, poly, FUN = min)\nst_as_sf(x)\n#> Simple feature collection with 4 features and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 294137 ymin: 9110797 xmax: 294431 ymax: 9111044\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#>   V1                       geometry\n#> 1 67 POLYGON ((294431 9110940, 2...\n#> 2 67 POLYGON ((294408.3 9110871,...\n#> 3 72 POLYGON ((294222.5 9111014,...\n#> 4 68 POLYGON ((294197 9110827, 2...\n\n# Extract the maximum value per polygon\nx <- aggregate(r, poly, FUN = max)\nst_as_sf(x)\n#> Simple feature collection with 4 features and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 294137 ymin: 9110797 xmax: 294431 ymax: 9111044\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#>   V1                       geometry\n#> 1 71 POLYGON ((294431 9110940, 2...\n#> 2 74 POLYGON ((294408.3 9110871,...\n#> 3 76 POLYGON ((294222.5 9111014,...\n#> 4 75 POLYGON ((294197 9110827, 2...\n\nOverlapping polygons\nThe method using the aggregate() function is largely based on an answer I received on stackoverflow. As specified by the user who answered my question, there is one catch.\n\nKeep in mind that if there is overlap between polygons (unlike in this example) then each raster value is only “counted” once, in the first polygon it falls in (to comply with the ordinary behaviour of aggregate).\n\nTo demonstrate it, we will increase the buffer radius to 90 meters. As seen in the next figure, two buffers are overlapping.\n\n# Create 90 meters radius buffers\npoly <- st_buffer(pts, dist = 90)\n\nplot(r, text_values = TRUE, col = pal, key.pos = NULL, reset = FALSE)\nplot(st_sfc(poly), add = TRUE, border = \"red\", lwd = 2, col = NA)\nplot(\n  pts_values,\n  add = TRUE,\n  pch = 21,\n  cex = 2,\n  bg = alpha(\"red\", 0.5),\n  col = alpha(\"red\", 0.5)\n)\n\n\n\n\n\n\n\nNow let’s calculate the average pixel value in each polygon.\nUsing the aggregate() function\nAs previously done with the smaller polygons, we can also use the aggregate() function.\n\naveraged_using_aggregate <- aggregate(r, poly, FUN = mean) %>% \n  st_as_sf()\n\naveraged_using_aggregate\n#> Simple feature collection with 4 features and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 294077 ymin: 9110737 xmax: 294491 ymax: 9111104\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#>         V1                       geometry\n#> 1 71.48485 POLYGON ((294491 9110940, 2...\n#> 2 71.40000 POLYGON ((294468.3 9110871,...\n#> 3 71.90625 POLYGON ((294282.5 9111014,...\n#> 4 70.92000 POLYGON ((294257 9110827, 2...\n\nUsing the st_join() function (manually)\nFirst, convert the polygons into a sf object and assign a unique id to each polygon.\n\npoly_sf <- poly %>% \n  st_as_sf() %>% \n  rowid_to_column(var = \"poly_id\")\n\npoly_sf\n#> Simple feature collection with 4 features and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 294077 ymin: 9110737 xmax: 294491 ymax: 9111104\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#>   poly_id                              x\n#> 1       1 POLYGON ((294491 9110940, 2...\n#> 2       2 POLYGON ((294468.3 9110871,...\n#> 3       3 POLYGON ((294282.5 9111014,...\n#> 4       4 POLYGON ((294257 9110827, 2...\n\nConvert the raster into a sf object.\n\nr_sf <- st_as_sf(r)\n\nr_sf\n#> Simple feature collection with 270 features and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 293991.8 ymin: 9110786 xmax: 294504.8 ymax: 9111213\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#> First 10 features:\n#>    V1                       geometry\n#> 1  87 POLYGON ((293991.8 9111213,...\n#> 2  83 POLYGON ((294020.3 9111213,...\n#> 3  82 POLYGON ((294048.8 9111213,...\n#> 4  76 POLYGON ((294077.3 9111213,...\n#> 5  80 POLYGON ((294105.8 9111213,...\n#> 6  85 POLYGON ((294134.3 9111213,...\n#> 7  83 POLYGON ((294162.8 9111213,...\n#> 8  87 POLYGON ((294191.3 9111213,...\n#> 9  85 POLYGON ((294219.8 9111213,...\n#> 10 79 POLYGON ((294248.3 9111213,...\n\nJoin the raster and the polygons together and drop the pixels that were not matched to any buffer.\n\ndf_sf <- st_join(r_sf, poly_sf) %>% \n  drop_na(poly_id)\n\nWe can now visualize the pixels in each buffer.\n\ndf_sf %>% \n  ggplot(aes(color = factor(poly_id))) +\n  geom_sf(fill = NA, color = \"black\", size = 0.25) +\n  geom_sf(data = poly_sf, fill = NA) +\n  geom_sf_text(aes(label = V1), color = \"#3c3c3c\") +\n  scale_color_manual(\n    breaks = c(1, 2, 3, 4),\n    values = c(\"red\", \"blue\", \"yellow\", \"green\")\n  ) +\n  facet_wrap(~poly_id)\n\n\n\n\n\n\n\nFinally, we can calculate the average pixel values in each polygon.\n\naveraged_using_st_join <- df_sf %>% \n  group_by(poly_id) %>% \n  summarise(V1 = mean(V1), n = n()) \n\naveraged_using_st_join\n#> Simple feature collection with 4 features and 3 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 294048.8 ymin: 9110786 xmax: 294504.8 ymax: 9111128\n#> Projected CRS: SIRGAS 2000 / UTM zone 25S\n#> # A tibble: 4 × 4\n#>   poly_id    V1     n                                                   geometry\n#>     <int> <dbl> <int>                                              <POLYGON [m]>\n#> 1       1  72.8    45 ((294305.3 9110871, 294305.3 9110900, 294305.3 9110928, 2…\n#> 2       2  71.0    42 ((294276.8 9110814, 294276.8 9110843, 294276.8 9110871, 2…\n#> 3       3  71.2    48 ((294077.3 9111014, 294077.3 9111042, 294105.8 9111042, 2…\n#> 4       4  70.7    33 ((294048.8 9110843, 294077.3 9110843, 294077.3 9110871, 2…\n\nIf we compare both the aggregate() and st_join() methods, we can see that there are differences.\n\naveraged_using_aggregate$V1\n#> [1] 71.48485 71.40000 71.90625 70.92000\naveraged_using_st_join$V1\n#> [1] 72.80000 71.02381 71.22917 70.72727\n\nAt this time of writing this, I can not find why I am getting different values. Please leave out a comment if you have an idea!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Just another R blog",
    "section": "",
    "text": "R\n\n\ngeospatial\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nApr 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\ndata manipulation\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nFeb 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\ngeospatial\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nNov 12, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\ngeospatial\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nMar 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nDec 20, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nAug 23, 2019\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nR\n\n\npackages\n\n\n\n\n\n\n\nPhilippe Massicotte\n\n\nJul 17, 2019\n\n\n\n\n\n\n\n\nNo matching items"
  }
]