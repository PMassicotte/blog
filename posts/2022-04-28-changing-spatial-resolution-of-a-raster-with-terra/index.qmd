---
title: " Changing spatial resolution of a raster with terra"
author: "Philippe Massicotte"
date: "2022-04-28"
categories: [R, Geospatial]
image: "images/usgs-nSOZqxCIEAs-unsplash.jpg"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  comment = "#>",
  collapse = TRUE,
  cache = FALSE,
  dpi = 600,
  out.width = "100%",
  fig.align = "center",
  fig.width = 8,
  fig.asp = 0.618, # 1 / phi
  fig.show = "hold",
  dev = "png",
  message = FALSE,
  warning = FALSE,
  echo = TRUE
)
```

Lately, I was working on a project and I needed to change the spatial resolution of a GeoTIFF to match that of another one. After looking around, I posted [a question on Stackoverflow](https://stackoverflow.com/questions/72044284/how-to-change-a-raster-to-a-specific-spatial-resolution/72044772#72044772). After experimenting around, I decided to blog about my experience of changing the spatial resolution of GeoTIFF rasters.

In this post, we will explore two ways to change the spatial resolution of a raster:

1. Aggregating/disaggregating pixels.
2. Resampling pixels from one geometry to another one.

![Shimmering blues and greens accentuate the textures of the Sierra de Velasco Mountains of northern Argentina. The urban area (pinkish circle) near the lower left part of the mountain range is La Rioja, the capital of the province of La Rioja. Follow the foothills to the upper right, where the city of San Fernando del Valle de Catamarca lies near extensive vineyards and fruit-growing areas (blue blocky shapes).](images/usgs-nSOZqxCIEAs-unsplash.jpg){width=75%}
<center>Photo by <a href="https://unsplash.com/@usgs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">USGS</a> on <a href="https://unsplash.com/s/photos/landsat?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></center>

## Aggregating a raster

I like to think that aggregating is the process of combining/merging the pixels of a raster and hence **reducing its spatial resolution**. When combining a set of neighbour pixels into a single pixel, one needs to define the statistical summary to be applied to the ensemble of the combined pixel. Such function can be the mean, median, min, maximum or any other function that produces a single numerical value.

Let's see how aggregation works using the `terra` R package. First, I will make a function that will be used to quickly display the pixel values of a raster.

```{r}
plot_raster <- function(r) {
  plot(r, axes = FALSE, legend = FALSE)
  plot(as.polygons(r, dissolve = FALSE, trunc = FALSE), add = TRUE)
  text(r, digits = 2)
}
```

For simplicity purposes, I will create a 4 by 4 raster containing values between 1 and 16.

```{r}
library(terra)

# Create a 4 x 4 matrix
m <- matrix(1:16, ncol = 4, nrow = 4)

# Convert the matrix into a raster
r16 <- rast(m)

r16
```

Using `plot_raster()`, we can display the value of each pixel within the raster. 

```{r}
plot_raster(r16)
```

Imagine now that we would like to aggregate the raster `r16` so it becomes a raster of 2 by 2 (i.e. 4 pixels). To achieve this, we can combine pixels 2 by 2 (horizontally and vertically) using the `aggregate()` function and the argument `fact = 2`.

```{r}
# Aggregate the raster using 2 pixels within the horizontal and the vertical directions
r4 <- aggregate(r16, fact = 2)

r4

plot_raster(r4)
```

What happened is that, by default, the `aggregate()` function is using the `mean()` function to summarize the pixel values. Hence, the upper left pixel has a value of 3.5 which correspond to the average of 4 pixels `(1 + 5 + 2 + 6) / 4 = 3.5`. As mentioned previously, one can use any function that returns a single value such as the `min()` function. 

```{r}
# Aggregate using the min() function
plot_raster(aggregate(r16, fun = "min"))
```

## Disaggregating a raster

If aggregating is the process of combining pixels, disaggregating is the process of **splitting** pixels into smaller ones. This operation is done with `disagg()`. Using the original 4 x 4 `r16`raster, each pixel will be disaggregated into 16 smaller pixels, once again using the `fact` argument.

```{r}
r256 <- disagg(r16, fact = 4)
r256
```

Here, each pixel of the original `r16` raster is divided into 16 smaller pixels (4 x 4), giving a total of 256 pixels (16 x 16).

```{r}
plot_raster(r256)
```

## Resampling

Resampling is the process of transferring the values from a raster into another raster that does not have the same geometry (i.e. cell size). This is often the case when working with remote-sensing products that are derived from sources with different spatial resolutions. For the following examples, I will use data from Sentinel-2 (10 meters resolution) and Landsat-8 (30 meters resolution). Both scenes are from the same area and [https://www.gisagmaps.com/l8-s2-comparison-and-download/](taken 15 minutes apart). Raster files can be downloaded on [https://www.gisagmaps.com/l8-s2-comparison-and-download/L8_S2_080415_Comparison.zip](www.gisagmaps.com). Images contain the top of atmosphere (TOA) reflectance and we will use the RGB bands.


```{r}
s2 <- rast(fs::dir_ls("data/L8_S2_080415_Comparison/S2_080415_TOA"))
s2

l8 <- rast(fs::dir_ls("data/L8_S2_080415_Comparison/L8_080415_TOA"))
l8
```

We can easily see the difference in spatial resolution between the two images.

```{r}
par(mar = c(1, 1, 3, 1), oma = c(1, 1, 3, 1))
plotRGB(s2, 3, 2, 1, stretch = "lin")
mtext("Sentinel-2 (10 meters)", side = 3)

par(mar = c(1, 1, 3, 1), oma = c(1, 1, 3, 1))
plotRGB(l8, 3, 2, 1, stretch = "lin")
mtext("Landsat-8 (30 meters)", side = 3)
```

Because the two rasters (`s2` and `l8`) do not have the same geometry, algebra operations can not be performed.

```{r, error=TRUE}
l8 - s2
```

Given that the pixel resolution of the Landsat-8 image is exactly a factor of 3 compared to Sentinel-2, one can be tempted to use `disagg()` to get the 10 m pixel resolution from the Landsat-8 so it matches the resolution of the Sentinel-2 image.

```{r, error = TRUE}
l8_10m <- disagg(l8, fact = 3)
l8_10m

res(s2)

res(l8_10m)
```

However, this is still not working because the two rasters do not have the exact extent.

```{r, error = TRUE}
l8_10m - s2
```

The solution is to use `resample()` to transfer the values of `l8` into the same geometry of `s2`.

```{r}
l8_resampled <- resample(l8, s2)

l8_resampled

par(mar = c(1, 1, 3, 1), oma = c(1, 1, 3, 1))
plotRGB(l8_resampled, 3, 2, 1, stretch = "lin")
mtext("Landsat-8 (resampled to 10 meters)", side = 3)
```

Now, we can perform raster operations.

```{r}
l8_resampled - s2
```

### UPDATE:  `r Sys.Date()`

[Michael Sumner](https://twitter.com/mdsumner) on Twitter pointed out that the same resampling operation could be done using `project()`.

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">project(l8, s2, method = &quot;&quot;) uses the warper, resample() is a subset<br><br>bilinear is default method, gdal calls it -r resample, default there is &quot;near&quot;</p>&mdash; Michael Sumner (@mdsumner) <a href="https://twitter.com/mdsumner/status/1529101265279795200?ref_src=twsrc%5Etfw">May 24, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 

Let's try resampling `l8` onto the same grid as `s2`.

```{r}
l8_resampled_project <- project(l8, s2)

l8_resampled_project
l8_resampled
```

Indeed, this is working perfectly fine and we can see that `l8_resampled_project` is now on the same 10 m by 10 m grid as `s2`.

Whereas this is working fine, I thought it was worth mentioning that if you **only want to reproject a raster** and not change the dimensions of the grid, one should use the destination CRS rather than the raster itself. Here both `l8` and `s2` have the same CRS and hence only reprojecting (i.e. without resampling) will not change the coordinate system.

```{r}
identical(crs(l8), crs(s2))
```

However, let's do it for demonstration purposes.

```{r}
project(l8, crs(s2))
```

As we can see, using `project(l8, crs(s2))` instead of `project(l8, s2)` will not change the pixel resolution of the reprojected raster. The reprojected `l8` raster still has a pixel resolution of 30 m by 30 m.

<details>
  
<summary>Session info</summary>

```{r sessioninfo, echo = FALSE}
## Reproducibility info
options(width = 120)
devtools::session_info()
```

</details>
